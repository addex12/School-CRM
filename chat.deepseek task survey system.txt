Recall Custom School Parent Survey System Development we have started in the other chat we had and compile admin dashboard with the newly created codes, rewrite complete code for production use to make it ready, add admin login dashboard use the following tree you have created me in our other Chat.
.
├── admin
│   ├── categories.php
│   ├── dashboard.php
│   ├── export.php
│   ├── includes
│   │   ├── footer.php
│   │   └── header.php
│   ├── questions.php
│   ├── response_view.php
│   ├── results.php
│   ├── send_test_email.php
│   ├── settings.php
│   ├── survey_builder.php
│   ├── survey_preview.php
│   ├── surveys.php
│   └── users.php
├── assets
│   ├── css
│   │   ├── admin.css
│   │   └── style.css
│   └── js
│       ├── admin.js
│       ├── srcipt.js
│       └── survey_builder.js
├── includes
│   ├── auth.php
│   ├── config.php
│   ├── db.php
│   └── functions.php
├── index.php
├── login.php
├── logout.php
├── parent_survey_system.sql
├── README.md
├── register.php
└── user
    ├── dashboard.php
    ├── survey.php
    └── survey_response.php

My database name is parent_survey_system and this is my sql: CREATE TABLE `questions` (
  `id` int(11) NOT NULL,
  `survey_id` int(11) NOT NULL,
  `question_text` text NOT NULL,
  `question_type` enum('multiple_choice','text','rating') NOT NULL,
  `options` text DEFAULT NULL,
  `is_required` tinyint(1) DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `responses` (
  `id` int(11) NOT NULL,
  `survey_id` int(11) NOT NULL,
  `question_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `response` text DEFAULT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `response_data` (
  `id` int(11) NOT NULL,
  `response_id` int(11) NOT NULL,
  `field_id` int(11) NOT NULL,
  `field_value` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `surveys` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `target_roles` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`target_roles`)),
  `created_by` int(11) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `starts_at` datetime NOT NULL,
  `ends_at` datetime NOT NULL,
  `is_active` tinyint(1) DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `survey_categories` (
  `id` int(11) NOT NULL,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `survey_fields` (
  `id` int(11) NOT NULL,
  `survey_id` int(11) NOT NULL,
  `field_type` enum('text','textarea','radio','checkbox','select','number','date','rating','file') NOT NULL,
  `field_label` varchar(255) NOT NULL,
  `field_name` varchar(100) NOT NULL,
  `field_options` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`field_options`)),
  `is_required` tinyint(1) DEFAULT 1,
  `validation_rules` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`validation_rules`)),
  `display_order` int(11) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `survey_responses` (
  `id` int(11) NOT NULL,
  `survey_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `system_settings` (
  `id` int(11) NOT NULL,
  `setting_key` varchar(100) NOT NULL,
  `setting_value` text DEFAULT NULL,
  `setting_group` varchar(50) NOT NULL,
  `is_public` tinyint(1) DEFAULT 0,
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `email` varchar(100) NOT NULL,
  `role` enum('admin','teacher','parent','student') NOT NULL DEFAULT 'parent',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `last_login` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


ALTER TABLE `questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `survey_id` (`survey_id`);

ALTER TABLE `responses`
  ADD PRIMARY KEY (`id`),
  ADD KEY `survey_id` (`survey_id`),
  ADD KEY `question_id` (`question_id`),
  ADD KEY `user_id` (`user_id`);

ALTER TABLE `response_data`
  ADD PRIMARY KEY (`id`),
  ADD KEY `response_id` (`response_id`),
  ADD KEY `field_id` (`field_id`);

ALTER TABLE `surveys`
  ADD PRIMARY KEY (`id`),
  ADD KEY `created_by` (`created_by`),
  ADD KEY `category_id` (`category_id`);

ALTER TABLE `survey_categories`
  ADD PRIMARY KEY (`id`);

ALTER TABLE `survey_fields`
  ADD PRIMARY KEY (`id`),
  ADD KEY `survey_id` (`survey_id`);

ALTER TABLE `survey_responses`
  ADD PRIMARY KEY (`id`),
  ADD KEY `survey_id` (`survey_id`),
  ADD KEY `user_id` (`user_id`);

ALTER TABLE `system_settings`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `setting_key` (`setting_key`);

ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD UNIQUE KEY `email` (`email`);


ALTER TABLE `questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `responses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `response_data`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `surveys`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `survey_categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `survey_fields`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `survey_responses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `system_settings`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;


ALTER TABLE `questions`
  ADD CONSTRAINT `questions_ibfk_1` FOREIGN KEY (`survey_id`) REFERENCES `surveys` (`id`) ON DELETE CASCADE;

ALTER TABLE `responses`
  ADD CONSTRAINT `responses_ibfk_1` FOREIGN KEY (`survey_id`) REFERENCES `surveys` (`id`),
  ADD CONSTRAINT `responses_ibfk_2` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`),
  ADD CONSTRAINT `responses_ibfk_3` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

ALTER TABLE `response_data`
  ADD CONSTRAINT `response_data_ibfk_1` FOREIGN KEY (`response_id`) REFERENCES `survey_responses` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `response_data_ibfk_2` FOREIGN KEY (`field_id`) REFERENCES `survey_fields` (`id`);

ALTER TABLE `surveys`
  ADD CONSTRAINT `surveys_ibfk_1` FOREIGN KEY (`created_by`) REFERENCES `users` (`id`),
  ADD CONSTRAINT `surveys_ibfk_2` FOREIGN KEY (`category_id`) REFERENCES `survey_categories` (`id`);

ALTER TABLE `survey_fields`
  ADD CONSTRAINT `survey_fields_ibfk_1` FOREIGN KEY (`survey_id`) REFERENCES `surveys` (`id`) ON DELETE CASCADE;

ALTER TABLE `survey_responses`
  ADD CONSTRAINT `survey_responses_ibfk_1` FOREIGN KEY (`survey_id`) REFERENCES `surveys` (`id`),
  ADD CONSTRAINT `survey_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);
COMMIT;                                         My codes are:  admin/categories.php:  <?php
require_once '../includes/auth.php';
requireAdmin();

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['add_category'])) {
        $name = $_POST['name'];
        $description = $_POST['description'];
        
        $stmt = $pdo->prepare("INSERT INTO survey_categories (name, description) VALUES (?, ?)");
        $stmt->execute([$name, $description]);
        $_SESSION['success'] = "Category added successfully!";
    }
    
    if (isset($_POST['update_category'])) {
        $id = $_POST['id'];
        $name = $_POST['name'];
        $description = $_POST['description'];
        
        $stmt = $pdo->prepare("UPDATE survey_categories SET name = ?, description = ? WHERE id = ?");
        $stmt->execute([$name, $description, $id]);
        $_SESSION['success'] = "Category updated successfully!";
    }
    
    if (isset($_POST['delete_category'])) {
        $id = $_POST['id'];
        
        // Check if category is in use
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM surveys WHERE category_id = ?");
        $stmt->execute([$id]);
        $count = $stmt->fetchColumn();
        
        if ($count > 0) {
            $_SESSION['error'] = "Cannot delete category that is in use by surveys!";
        } else {
            $stmt = $pdo->prepare("DELETE FROM survey_categories WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['success'] = "Category deleted successfully!";
        }
    }
    
    header("Location: categories.php");
    exit();
}

// Get all categories
$categories = $pdo->query("SELECT * FROM survey_categories ORDER BY name")->fetchAll();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Manage Categories - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Manage Survey Categories</h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php" class="active">Categories</a>
                <a href="users.php">Users</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <?php if (isset($_SESSION['success'])): ?>
                <div class="success-message"><?php echo $_SESSION['success']; unset($_SESSION['success']); ?></div>
            <?php endif; ?>
            
            <?php if (isset($_SESSION['error'])): ?>
                <div class="error-message"><?php echo $_SESSION['error']; unset($_SESSION['error']); ?></div>
            <?php endif; ?>
            
            <div class="form-section">
                <h2>Add New Category</h2>
                <form method="POST">
                    <div class="form-group">
                        <label for="name">Category Name:</label>
                        <input type="text" id="name" name="name" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <textarea id="description" name="description" rows="3"></textarea>
                    </div>
                    
                    <button type="submit" name="add_category" class="btn btn-primary">Add Category</button>
                </form>
            </div>
            
            <div class="table-section">
                <h2>Existing Categories</h2>
                
                <?php if (count($categories) > 0): ?>
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($categories as $category): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($category['name']); ?></td>
                                    <td><?php echo htmlspecialchars($category['description']); ?></td>
                                    <td>
                                        <button type="button" class="btn btn-edit" onclick="openEditModal(<?php echo $category['id']; ?>, '<?php echo htmlspecialchars($category['name'], ENT_QUOTES); ?>', '<?php echo htmlspecialchars($category['description'], ENT_QUOTES); ?>')">Edit</button>
                                        <form method="POST" style="display:inline;">
                                            <input type="hidden" name="id" value="<?php echo $category['id']; ?>">
                                            <button type="submit" name="delete_category" class="btn btn-delete" onclick="return confirm('Are you sure you want to delete this category?')">Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php else: ?>
                    <p>No categories found.</p>
                <?php endif; ?>
            </div>
        </div>
    </div>
    
    <!-- Edit Category Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeEditModal()">&times;</span>
            <h2>Edit Category</h2>
            <form id="editForm" method="POST">
                <input type="hidden" name="id" id="editId">
                <input type="hidden" name="update_category">
                
                <div class="form-group">
                    <label for="editName">Category Name:</label>
                    <input type="text" id="editName" name="name" required>
                </div>
                
                <div class="form-group">
                    <label for="editDescription">Description:</label>
                    <textarea id="editDescription" name="description" rows="3"></textarea>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Category</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // Edit modal functions
        function openEditModal(id, name, description) {
            document.getElementById('editId').value = id;
            document.getElementById('editName').value = name;
            document.getElementById('editDescription').value = description;
            document.getElementById('editModal').style.display = 'block';
        }
        
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</body>
</html>                                      admin/dashboard.php:  <?php
require_once '../includes/auth.php';
requireAdmin();

// Get statistics
$totalSurveys = $pdo->query("SELECT COUNT(*) FROM surveys")->fetchColumn();
$activeSurveys = $pdo->query("SELECT COUNT(*) FROM surveys WHERE is_active = TRUE AND starts_at <= NOW() AND ends_at >= NOW()")->fetchColumn();
$totalResponses = $pdo->query("SELECT COUNT(*) FROM survey_responses")->fetchColumn();
$totalUsers = $pdo->query("SELECT COUNT(*) FROM users")->fetchColumn();

// Get recent surveys
$recentSurveys = $pdo->query("
    SELECT s.*, COUNT(r.id) as response_count 
    FROM surveys s
    LEFT JOIN survey_responses r ON s.id = r.survey_id
    GROUP BY s.id
    ORDER BY s.created_at DESC
    LIMIT 5
")->fetchAll();

// Get recent responses
$recentResponses = $pdo->query("
    SELECT r.*, u.username, s.title as survey_title
    FROM survey_responses r
    JOIN users u ON r.user_id = u.id
    JOIN surveys s ON r.survey_id = s.id
    ORDER BY r.submitted_at DESC
    LIMIT 5
")->fetchAll();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin Dashboard - Survey System</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <header>
            <h1>Admin Dashboard</h1>
            <nav>
                <a href="dashboard.php" class="active">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php">Categories</a>
                <a href="users.php">Users</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Total Surveys</h3>
                <p><?php echo $totalSurveys; ?></p>
            </div>
            <div class="stat-card">
                <h3>Active Surveys</h3>
                <p><?php echo $activeSurveys; ?></p>
            </div>
            <div class="stat-card">
                <h3>Total Responses</h3>
                <p><?php echo $totalResponses; ?></p>
            </div>
            <div class="stat-card">
                <h3>Registered Users</h3>
                <p><?php echo $totalUsers; ?></p>
            </div>
        </div>
        
        <div class="dashboard-row">
            <div class="dashboard-col">
                <h2>Recent Surveys</h2>
                <?php if (count($recentSurveys) > 0): ?>
                    <table>
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Responses</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($recentSurveys as $survey): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($survey['title']); ?></td>
                                    <td><?php echo $survey['response_count']; ?></td>
                                    <td>
                                        <?php if ($survey['is_active'] && $survey['starts_at'] <= date('Y-m-d H:i:s') && $survey['ends_at'] >= date('Y-m-d H:i:s')): ?>
                                            <span class="status-active">Active</span>
                                        <?php elseif (!$survey['is_active']): ?>
                                            <span class="status-inactive">Inactive</span>
                                        <?php else: ?>
                                            <span class="status-pending">Pending/Scheduled</span>
                                        <?php endif; ?>
                                    </td>
                                    <td>
                                        <a href="survey_preview.php?id=<?php echo $survey['id']; ?>">Preview</a>
                                        <a href="results.php?survey_id=<?php echo $survey['id']; ?>">Results</a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php else: ?>
                    <p>No surveys found.</p>
                <?php endif; ?>
            </div>
            
            <div class="dashboard-col">
                <h2>Recent Responses</h2>
                <?php if (count($recentResponses) > 0): ?>
                    <table>
                        <thead>
                            <tr>
                                <th>User</th>
                                <th>Survey</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($recentResponses as $response): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($response['username']); ?></td>
                                    <td><?php echo htmlspecialchars($response['survey_title']); ?></td>
                                    <td><?php echo date('M j, Y g:i a', strtotime($response['submitted_at'])); ?></td>
                                    <td>
                                        <a href="response_view.php?id=<?php echo $response['id']; ?>">View</a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php else: ?>
                    <p>No responses found.</p>
                <?php endif; ?>
            </div>
        </div>
        
        <div class="chart-container">
            <h2>Response Trends</h2>
            <canvas id="responseChart"></canvas>
        </div>
    </div>

    <script>
        // Response trends chart
        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('responseChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [
                        <?php 
                        // Generate labels for last 7 days
                        for ($i = 6; $i >= 0; $i--) {
                            $date = date('M j', strtotime("-$i days"));
                            echo "'$date',";
                        }
                        ?>
                    ],
                    datasets: [{
                        label: 'Survey Responses',
                        data: [
                            <?php
                            // Get response counts for last 7 days
                            for ($i = 6; $i >= 0; $i--) {
                                $date = date('Y-m-d', strtotime("-$i days"));
                                $stmt = $pdo->prepare("SELECT COUNT(*) FROM survey_responses WHERE DATE(submitted_at) = ?");
                                $stmt->execute([$date]);
                                $count = $stmt->fetchColumn();
                                echo "$count,";
                            }
                            ?>
                        ],
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Responses'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>      admin/export.php:  <?php
require_once '../includes/auth.php';
requireAdmin();

$survey_id = $_GET['survey_id'] ?? 0;
$type = $_GET['type'] ?? 'csv';

// Get survey info
$stmt = $pdo->prepare("SELECT * FROM surveys WHERE id = ?");
$stmt->execute([$survey_id]);
$survey = $stmt->fetch();

if (!$survey) {
    header("Location: results.php");
    exit();
}

// Get survey fields
$stmt = $pdo->prepare("SELECT * FROM survey_fields WHERE survey_id = ? ORDER BY display_order");
$stmt->execute([$survey_id]);
$fields = $stmt->fetchAll();

// Get all responses for this survey
$stmt = $pdo->prepare("
    SELECT r.*, u.username, u.email, u.role
    FROM survey_responses r
    JOIN users u ON r.user_id = u.id
    WHERE r.survey_id = ?
    ORDER BY r.submitted_at DESC
");
$stmt->execute([$survey_id]);
$responses = $stmt->fetchAll();

// Get response data for all responses
$response_data = [];
foreach ($responses as $response) {
    $stmt = $pdo->prepare("
        SELECT rd.*, sf.field_name, sf.field_label
        FROM response_data rd
        JOIN survey_fields sf ON rd.field_id = sf.id
        WHERE rd.response_id = ?
    ");
    $stmt->execute([$response['id']]);
    $data = $stmt->fetchAll();
    
    $response_data[$response['id']] = $data;
}

// Handle different export types
switch ($type) {
    case 'csv':
        exportCSV($survey, $fields, $responses, $response_data);
        break;
    case 'excel':
        exportExcel($survey, $fields, $responses, $response_data);
        break;
    case 'pdf':
        exportPDF($survey, $fields, $responses, $response_data);
        break;
    default:
        header("Location: results.php?survey_id=$survey_id");
        exit();
}

function exportCSV($survey, $fields, $responses, $response_data) {
    header('Content-Type: text/csv');
    header('Content-Disposition: attachment; filename="survey_' . $survey['id'] . '_results.csv"');
    
    $output = fopen('php://output', 'w');
    
    // CSV header
    $header = ['Response ID', 'Username', 'Email', 'Role', 'Submitted At'];
    foreach ($fields as $field) {
        $header[] = $field['field_label'] . ' (' . $field['field_name'] . ')';
    }
    fputcsv($output, $header);
    
    // CSV data
    foreach ($responses as $response) {
        $row = [
            $response['id'],
            $response['username'],
            $response['email'],
            $response['role'],
            $response['submitted_at']
        ];
        
        foreach ($fields as $field) {
            $value = '';
            foreach ($response_data[$response['id']] as $data) {
                if ($data['field_id'] == $field['id']) {
                    $value = $data['field_value'];
                    break;
                }
            }
            $row[] = $value;
        }
        
        fputcsv($output, $row);
    }
    
    fclose($output);
    exit();
}

function exportExcel($survey, $fields, $responses, $response_data) {
    require_once '../vendor/autoload.php';
    
    $spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
    $sheet = $spreadsheet->getActiveSheet();
    
    // Excel header
    $header = ['Response ID', 'Username', 'Email', 'Role', 'Submitted At'];
    foreach ($fields as $field) {
        $header[] = $field['field_label'] . ' (' . $field['field_name'] . ')';
    }
    $sheet->fromArray($header, null, 'A1');
    
    // Excel data
    $row = 2;
    foreach ($responses as $response) {
        $data = [
            $response['id'],
            $response['username'],
            $response['email'],
            $response['role'],
            $response['submitted_at']
        ];
        
        foreach ($fields as $field) {
            $value = '';
            foreach ($response_data[$response['id']] as $d) {
                if ($d['field_id'] == $field['id']) {
                    $value = $d['field_value'];
                    break;
                }
            }
            $data[] = $value;
        }
        
        $sheet->fromArray($data, null, "A$row");
        $row++;
    }
    
    // Auto-size columns
    foreach (range('A', $sheet->getHighestDataColumn()) as $col) {
        $sheet->getColumnDimension($col)->setAutoSize(true);
    }
    
    // Set headers and save
    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    header('Content-Disposition: attachment; filename="survey_' . $survey['id'] . '_results.xlsx"');
    
    $writer = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($spreadsheet);
    $writer->save('php://output');
    exit();
}

function exportPDF($survey, $fields, $responses, $response_data) {
    require_once '../vendor/autoload.php';
    
    $mpdf = new \Mpdf\Mpdf();
    
    // PDF content
    $html = '<h1>' . htmlspecialchars($survey['title']) . '</h1>';
    $html .= '<p>' . htmlspecialchars($survey['description']) . '</p>';
    $html .= '<p><strong>Total Responses:</strong> ' . count($responses) . '</p>';
    $html .= '<hr>';
    
    foreach ($responses as $response) {
        $html .= '<h2>Response from ' . htmlspecialchars($response['username']) . '</h2>';
        $html .= '<p><strong>Role:</strong> ' . htmlspecialchars($response['role']) . '</p>';
        $html .= '<p><strong>Submitted:</strong> ' . $response['submitted_at'] . '</p>';
        
        $html .= '<table border="1" cellpadding="5" cellspacing="0" width="100%">';
        $html .= '<tr><th width="30%">Question</th><th width="70%">Response</th></tr>';
        
        foreach ($response_data[$response['id']] as $data) {
            $html .= '<tr>';
            $html .= '<td>' . htmlspecialchars($data['field_label']) . '</td>';
            $html .= '<td>' . nl2br(htmlspecialchars($data['field_value'])) . '</td>';
            $html .= '</tr>';
        }
        
        $html .= '</table>';
        $html .= '<div style="page-break-after: always;"></div>';
    }
    
    $mpdf->WriteHTML($html);
    
    // Output PDF
    header('Content-Type: application/pdf');
    header('Content-Disposition: attachment; filename="survey_' . $survey['id'] . '_results.pdf"');
    $mpdf->Output('php://output', 'D');
    exit();
}                            admin/questions.php:  <?php
require_once '../includes/auth.php';
requireAdmin();

$survey_id = $_GET['survey_id'] ?? 0;

// Get survey info
$stmt = $pdo->prepare("SELECT * FROM surveys WHERE id = ?");
$stmt->execute([$survey_id]);
$survey = $stmt->fetch();

if (!$survey) {
    header("Location: surveys.php");
    exit();
}

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['save_questions'])) {
        // First, delete existing questions for this survey
        $pdo->prepare("DELETE FROM questions WHERE survey_id = ?")->execute([$survey_id]);
        
        // Insert new questions
        if (!empty($_POST['questions'])) {
            foreach ($_POST['questions'] as $question) {
                $options = null;
                if ($question['type'] === 'multiple_choice' && !empty($question['options'])) {
                    $options = json_encode(array_values($question['options']));
                }
                
                $stmt = $pdo->prepare("INSERT INTO questions (survey_id, question_text, question_type, options, is_required) VALUES (?, ?, ?, ?, ?)");
                $stmt->execute([
                    $survey_id,
                    $question['text'],
                    $question['type'],
                    $options,
                    isset($question['required']) ? 1 : 0
                ]);
            }
        }
        
        $success = "Questions saved successfully!";
    }
}

// Get existing questions for this survey
$stmt = $pdo->prepare("SELECT * FROM questions WHERE survey_id = ? ORDER BY id");
$stmt->execute([$survey_id]);
$questions = $stmt->fetchAll();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Manage Questions - Parent Survey System</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Manage Questions: <?php echo htmlspecialchars($survey['title']); ?></h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <?php if (isset($success)): ?>
                <div class="success-message"><?php echo $success; ?></div>
            <?php endif; ?>
            
            <form method="POST">
                <div id="questions-container">
                    <?php if (count($questions) > 0): ?>
                        <?php foreach ($questions as $index => $question): ?>
                            <div class="question-item">
                                <div class="question-header">
                                    <h3>Question #<?php echo $index + 1; ?></h3>
                                    <button type="button" class="delete-question">Delete</button>
                                </div>
                                
                                <div class="form-group">
                                    <label>Question Text:</label>
                                    <textarea name="questions[<?php echo $index + 1; ?>][text]" required><?php echo htmlspecialchars($question['question_text']); ?></textarea>
                                </div>
                                
                                <div class="form-group">
                                    <label>Question Type:</label>
                                    <select name="questions[<?php echo $index + 1; ?>][type]" class="question-type" required>
                                        <option value="multiple_choice" <?php echo $question['question_type'] === 'multiple_choice' ? 'selected' : ''; ?>>Multiple Choice</option>
                                        <option value="text" <?php echo $question['question_type'] === 'text' ? 'selected' : ''; ?>>Text Answer</option>
                                        <option value="rating" <?php echo $question['question_type'] === 'rating' ? 'selected' : ''; ?>>Rating (1-5)</option>
                                    </select>
                                </div>
                                
                                <?php if ($question['question_type'] === 'multiple_choice'): ?>
                                    <div class="form-group question-options">
                                        <label>Options (for multiple choice):</label>
                                        <div class="options-container">
                                            <?php 
                                            $options = json_decode($question['options'], true);
                                            if (is_array($options)): 
                                                foreach ($options as $optIndex => $option): ?>
                                                    <div class="option-container">
                                                        <input type="text" class="option-input" name="questions[<?php echo $index + 1; ?>][options][<?php echo $optIndex; ?>]" value="<?php echo htmlspecialchars($option); ?>" placeholder="Option <?php echo $optIndex + 1; ?>" required>
                                                        <button type="button" class="delete-option">×</button>
                                                    </div>
                                                <?php endforeach; 
                                            endif; ?>
                                        </div>
                                        <button type="button" class="add-option">Add Option</button>
                                    </div>
                                <?php endif; ?>
                                
                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" name="questions[<?php echo $index + 1; ?>][required]" <?php echo $question['is_required'] ? 'checked' : ''; ?>>
                                        Required Question
                                    </label>
                                </div>
                            </div>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <p class="no-questions">No questions yet. Click "Add Question" to get started.</p>
                    <?php endif; ?>
                </div>
                
                <div class="form-actions">
                    <button type="button" id="add-question" class="btn">Add Question</button>
                    <button type="submit" name="save_questions" class="btn btn-primary">Save All Questions</button>
                </div>
            </form>
        </div>
    </div>
    
    <script src="../assets/js/script.js"></script>
</body>
</html>                                         admin/response_view.php:    <?php
require_once '../includes/auth.php';
requireAdmin();

$response_id = $_GET['id'] ?? 0;

// Get response info
$stmt = $pdo->prepare("
    SELECT r.*, u.username, u.email, u.role, s.title as survey_title
    FROM survey_responses r
    JOIN users u ON r.user_id = u.id
    JOIN surveys s ON r.survey_id = s.id
    WHERE r.id = ?
");
$stmt->execute([$response_id]);
$response = $stmt->fetch();

if (!$response) {
    header("Location: results.php");
    exit();
}

// Get response data
$stmt = $pdo->prepare("
    SELECT d.*, f.field_label, f.field_type
    FROM response_data d
    JOIN survey_fields f ON d.field_id = f.id
    WHERE d.response_id = ?
    ORDER BY f.display_order
");
$stmt->execute([$response_id]);
$response_data = $stmt->fetchAll();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Response Details - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <style>
        .response-info {
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .response-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
        }
        .response-item {
            background-color: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .response-item h3 {
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .file-preview {
            max-width: 100%;
            max-height: 200px;
            display: block;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Response Details</h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php">Categories</a>
                <a href="users.php">Users</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <div class="response-info">
                <h2><?php echo htmlspecialchars($response['survey_title']); ?></h2>
                <p><strong>Respondent:</strong> <?php echo htmlspecialchars($response['username']); ?> (<?php echo ucfirst($response['role']); ?>)</p>
                <p><strong>Email:</strong> <?php echo htmlspecialchars($response['email']); ?></p>
                <p><strong>Submitted:</strong> <?php echo date('M j, Y g:i A', strtotime($response['submitted_at'])); ?></p>
            </div>
            
            <div class="response-details">
                <?php foreach ($response_data as $data): ?>
                    <div class="response-item">
                        <h3><?php echo htmlspecialchars($data['field_label']); ?></h3>
                        
                        <?php if ($data['field_type'] === 'file'): ?>
                            <?php if ($data['field_value']): ?>
                                <?php 
                                $filepath = "../uploads/survey_{$response['survey_id']}/{$data['field_value']}";
                                if (file_exists($filepath)): 
                                    $fileinfo = pathinfo($filepath);
                                    if (in_array(strtolower($fileinfo['extension']), ['jpg', 'jpeg', 'png', 'gif'])): ?>
                                        <img src="<?php echo $filepath; ?>" class="file-preview" alt="Uploaded file">
                                    <?php else: ?>
                                        <a href="<?php echo $filepath; ?>" target="_blank">Download File</a>
                                    <?php endif; ?>
                                <?php else: ?>
                                    <p>File not found</p>
                                <?php endif; ?>
                            <?php else: ?>
                                <p>No file uploaded</p>
                            <?php endif; ?>
                        
                        <?php elseif (in_array($data['field_type'], ['radio', 'checkbox', 'select'])): ?>
                            <p><?php echo htmlspecialchars($data['field_value']); ?></p>
                        
                        <?php elseif ($data['field_type'] === 'rating'): ?>
                            <div class="rating-display">
                                <?php 
                                $rating = intval($data['field_value']);
                                for ($i = 1; $i <= 5; $i++): ?>
                                    <span class="rating-star <?php echo $i <= $rating ? 'active' : ''; ?>">★</span>
                                <?php endfor; ?>
                                <span class="rating-value">(<?php echo $rating; ?>/5)</span>
                            </div>
                        
                        <?php else: ?>
                            <p><?php echo nl2br(htmlspecialchars($data['field_value'])); ?></p>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>
            </div>
            
            <div class="form-actions">
                <a href="results.php?survey_id=<?php echo $response['survey_id']; ?>" class="btn">Back to Results</a>
            </div>
        </div>
    </div>
</body>
</html>           admin/results.php:   <?php
require_once '../includes/auth.php';
requireAdmin();

$survey_id = $_GET['survey_id'] ?? 0;

// Get survey info if specific survey is selected
$survey = null;
if ($survey_id) {
    $stmt = $pdo->prepare("SELECT * FROM surveys WHERE id = ?");
    $stmt->execute([$survey_id]);
    $survey = $stmt->fetch();
}

// Get all surveys for dropdown
$surveys = $pdo->query("SELECT id, title FROM surveys ORDER BY created_at DESC")->fetchAll();

// Get responses data if survey is selected
$response_data = [];
$questions = [];
$summary_stats = [];
$respondents = [];

if ($survey) {
    // Get questions for this survey
    $stmt = $pdo->prepare("SELECT * FROM survey_fields WHERE survey_id = ? ORDER BY display_order");
    $stmt->execute([$survey_id]);
    $questions = $stmt->fetchAll();
    
    // Get all responses for this survey
    $stmt = $pdo->prepare("
        SELECT r.*, u.username, u.role
        FROM survey_responses r
        JOIN users u ON r.user_id = u.id
        WHERE r.survey_id = ?
        ORDER BY r.submitted_at DESC
    ");
    $stmt->execute([$survey_id]);
    $respondents = $stmt->fetchAll();
    
    // Get response data for summary
    foreach ($questions as $question) {
        $stats = [
            'question' => $question,
            'responses' => [],
            'summary' => null
        ];
        
        if (in_array($question['field_type'], ['rating', 'number'])) {
            $stmt = $pdo->prepare("
                SELECT AVG(CAST(rd.field_value AS DECIMAL(10,2))) as avg_value, 
                       COUNT(rd.id) as response_count
                FROM response_data rd
                WHERE rd.field_id = ?
            ");
            $stmt->execute([$question['id']]);
            $stats['summary'] = $stmt->fetch();
        }
        
        $response_data[$question['id']] = $stats;
    }
    
    // Get individual responses
    foreach ($respondents as $respondent) {
        $stmt = $pdo->prepare("
            SELECT rd.*, sf.field_label, sf.field_type
            FROM response_data rd
            JOIN survey_fields sf ON rd.field_id = sf.id
            WHERE rd.response_id = ?
        ");
        $stmt->execute([$respondent['id']]);
        $responses = $stmt->fetchAll();
        
        foreach ($responses as $response) {
            $response_data[$response['field_id']]['responses'][] = $response;
        }
    }
    
    // Calculate completion rate
    $stmt = $pdo->prepare("
        SELECT COUNT(DISTINCT u.id) as total_users
        FROM users u
        WHERE JSON_CONTAINS(?, JSON_QUOTE(u.role))
    ");
    $stmt->execute([$survey['target_roles']]);
    $total_users = $stmt->fetchColumn();
    $completion_rate = $total_users > 0 ? (count($respondents) / $total_users) * 100 : 0;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Survey Results - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .survey-selector {
            background: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .results-header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .results-grid {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 20px;
        }
        .respondents-list {
            background: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            max-height: 600px;
            overflow-y: auto;
        }
        .respondent-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }
        .respondent-item:hover {
            background-color: #f5f5f5;
        }
        .respondent-item.active {
            background-color: #e3f2fd;
        }
        .results-details {
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .question-result {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        .chart-container {
            margin: 20px 0;
        }
        .response-item {
            margin-bottom: 15px;
        }
        .export-options {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Survey Results</h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php">Categories</a>
                <a href="users.php">Users</a>
                <a href="results.php" class="active">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <div class="survey-selector">
                <form method="GET">
                    <div class="form-group">
                        <label for="survey_id">Select Survey:</label>
                        <select id="survey_id" name="survey_id" onchange="this.form.submit()">
                            <option value="">-- Select a Survey --</option>
                            <?php foreach ($surveys as $s): ?>
                                <option value="<?php echo $s['id']; ?>" <?php echo $survey_id == $s['id'] ? 'selected' : ''; ?>>
                                    <?php echo htmlspecialchars($s['title']); ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                </form>
            </div>
            
            <?php if ($survey): ?>
                <div class="results-header">
                    <h2><?php echo htmlspecialchars($survey['title']); ?></h2>
                    <p><?php echo htmlspecialchars($survey['description']); ?></p>
                    <div class="stats">
                        <p><strong>Total Responses:</strong> <?php echo count($respondents); ?></p>
                        <p><strong>Completion Rate:</strong> <?php echo round($completion_rate, 2); ?>%</p>
                        <p><strong>Survey Period:</strong> 
                            <?php echo date('M j, Y', strtotime($survey['starts_at'])); ?> to 
                            <?php echo date('M j, Y', strtotime($survey['ends_at'])); ?>
                        </p>
                    </div>
                </div>
                
                <div class="results-grid">
                    <div class="respondents-list">
                        <h3>Respondents</h3>
                        <?php foreach ($respondents as $respondent): ?>
                            <div class="respondent-item" onclick="showRespondent(<?php echo $respondent['id']; ?>)">
                                <p><strong><?php echo htmlspecialchars($respondent['username']); ?></strong></p>
                                <p><?php echo ucfirst($respondent['role']); ?></p>
                                <p><?php echo date('M j, Y g:i a', strtotime($respondent['submitted_at'])); ?></p>
                            </div>
                        <?php endforeach; ?>
                    </div>
                    
                    <div class="results-details" id="results-details">
                        <h2>Survey Results Summary</h2>
                        
                        <?php foreach ($response_data as $data): ?>
                            <div class="question-result">
                                <h3><?php echo htmlspecialchars($data['question']['field_label']); ?></h3>
                                <p><strong>Type:</strong> <?php echo ucfirst(str_replace('_', ' ', $data['question']['field_type'])); ?></p>
                                
                                <?php if ($data['question']['field_type'] === 'rating' && $data['summary']): ?>
                                    <div class="chart-container">
                                        <canvas id="chart-<?php echo $data['question']['id']; ?>"></canvas>
                                    </div>
                                    <p>Average Rating: <?php echo number_format($data['summary']['avg_value'], 2); ?>/5</p>
                                    
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            const ctx = document.getElementById('chart-<?php echo $data['question']['id']; ?>').getContext('2d');
                                            const chart = new Chart(ctx, {
                                                type: 'bar',
                                                data: {
                                                    labels: ['1', '2', '3', '4', '5'],
                                                    datasets: [{
                                                        label: 'Rating Distribution',
                                                        data: [
                                                            <?php 
                                                            $counts = [0, 0, 0, 0, 0];
                                                            foreach ($data['responses'] as $response) {
                                                                $rating = intval($response['field_value']);
                                                                if ($rating >= 1 && $rating <= 5) {
                                                                    $counts[$rating - 1]++;
                                                                }
                                                            }
                                                            echo implode(', ', $counts);
                                                            ?>
                                                        ],
                                                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                                                        borderColor: 'rgba(54, 162, 235, 1)',
                                                        borderWidth: 1
                                                    }]
                                                },
                                                options: {
                                                    scales: {
                                                        y: {
                                                            beginAtZero: true,
                                                            title: {
                                                                display: true,
                                                                text: 'Number of Responses'
                                                            }
                                                        },
                                                        x: {
                                                            title: {
                                                                display: true,
                                                                text: 'Rating'
                                                            }
                                                        }
                                                    }
                                                }
                                            });
                                        });
                                    </script>
                                
                                <?php elseif ($data['question']['field_type'] === 'number' && $data['summary']): ?>
                                    <p>Average Value: <?php echo number_format($data['summary']['avg_value'], 2); ?></p>
                                    <p>Total Responses: <?php echo $data['summary']['response_count']; ?></p>
                                
                                <?php elseif (in_array($data['question']['field_type'], ['radio', 'select'])): ?>
                                    <div class="chart-container">
                                        <canvas id="chart-<?php echo $data['question']['id']; ?>"></canvas>
                                    </div>
                                    
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            const ctx = document.getElementById('chart-<?php echo $data['question']['id']; ?>').getContext('2d');
                                            const options = <?php echo $data['question']['field_options'] ?: '[]'; ?>;
                                            const counts = {};
                                            
                                            // Initialize counts
                                            options.forEach(option => {
                                                counts[option] = 0;
                                            });
                                            
                                            // Count responses
                                            <?php 
                                            foreach ($data['responses'] as $response) {
                                                echo "counts['{$response['field_value']}']++;";
                                            }
                                            ?>
                                            
                                            const chart = new Chart(ctx, {
                                                type: 'pie',
                                                data: {
                                                    labels: options,
                                                    datasets: [{
                                                        data: options.map(option => counts[option]),
                                                        backgroundColor: [
                                                            'rgba(255, 99, 132, 0.5)',
                                                            'rgba(54, 162, 235, 0.5)',
                                                            'rgba(255, 206, 86, 0.5)',
                                                            'rgba(75, 192, 192, 0.5)',
                                                            'rgba(153, 102, 255, 0.5)'
                                                        ],
                                                        borderColor: [
                                                            'rgba(255, 99, 132, 1)',
                                                            'rgba(54, 162, 235, 1)',
                                                            'rgba(255, 206, 86, 1)',
                                                            'rgba(75, 192, 192, 1)',
                                                            'rgba(153, 102, 255, 1)'
                                                        ],
                                                        borderWidth: 1
                                                    }]
                                                },
                                                options: {
                                                    responsive: true,
                                                    plugins: {
                                                        legend: {
                                                            position: 'right',
                                                        },
                                                        title: {
                                                            display: true,
                                                            text: 'Response Distribution'
                                                        }
                                                    }
                                                }
                                            });
                                        });
                                    </script>
                                
                                <?php elseif ($data['question']['field_type'] === 'checkbox'): ?>
                                    <table>
                                        <thead>
                                            <tr>
                                                <th>Option</th>
                                                <th>Count</th>
                                                <th>Percentage</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <?php
                                            $options = json_decode($data['question']['field_options'], true);
                                            $total = count($data['responses']);
                                            
                                            if (is_array($options)) {
                                                foreach ($options as $option) {
                                                    $count = 0;
                                                    foreach ($data['responses'] as $response) {
                                                        $values = explode(', ', $response['field_value']);
                                                        if (in_array($option, $values)) {
                                                            $count++;
                                                        }
                                                    }
                                                    $percentage = $total > 0 ? round(($count / $total) * 100, 2) : 0;
                                                    ?>
                                                    <tr>
                                                        <td><?php echo htmlspecialchars($option); ?></td>
                                                        <td><?php echo $count; ?></td>
                                                        <td><?php echo $percentage; ?>%</td>
                                                    </tr>
                                                    <?php
                                                }
                                            }
                                            ?>
                                        </tbody>
                                    </table>
                                
                                <?php else: ?>
                                    <h4>Sample Responses:</h4>
                                    <div class="response-samples">
                                        <?php 
                                        $sample = array_slice($data['responses'], 0, 5);
                                        foreach ($sample as $response): ?>
                                            <div class="response-item">
                                                <p><?php echo nl2br(htmlspecialchars($response['field_value'])); ?></p>
                                            </div>
                                        <?php endforeach; ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        <?php endforeach; ?>
                        
                        <div class="export-options">
                            <h3>Export Results</h3>
                            <a href="export.php?type=csv&survey_id=<?php echo $survey_id; ?>" class="btn">Export as CSV</a>
                            <a href="export.php?type=excel&survey_id=<?php echo $survey_id; ?>" class="btn">Export as Excel</a>
                            <a href="export.php?type=pdf&survey_id=<?php echo $survey_id; ?>" class="btn">Export as PDF</a>
                        </div>
                    </div>
                </div>
            <?php else: ?>
                <div class="no-survey-selected">
                    <p>Please select a survey from the dropdown above to view results.</p>
                </div>
            <?php endif; ?>
        </div>
    </div>
    
    <script>
        function showRespondent(responseId) {
            // Highlight selected respondent
            document.querySelectorAll('.respondent-item').forEach(item => {
                item.classList.remove('active');
                if (item.getAttribute('onclick').includes(responseId)) {
                    item.classList.add('active');
                }
            });
            
            // In a real implementation, you would fetch and display the respondent's details
            // For now, we'll just show a message
            document.getElementById('results-details').innerHTML = `
                <h2>Respondent Details</h2>
                <p>Loading response data for ID: ${responseId}</p>
                <p>In a full implementation, this would show the individual's complete response.</p>
                <a href="response_view.php?id=${responseId}" class="btn">View Full Response</a>
                <a href="results.php?survey_id=<?php echo $survey_id; ?>" class="btn">Back to Summary</a>
            `;
        }
    </script>
</body>
</html>           admin/send_test_email.php:   <?php
require_once '../includes/auth.php';
requireAdmin();

header('Content-Type: application/json');

$email = $_POST['email'] ?? '';

if (empty($email)) {
    echo json_encode(['success' => false, 'message' => 'Email address is required']);
    exit();
}

// Get email settings
$stmt = $pdo->query("SELECT * FROM system_settings WHERE setting_group = 'email'");
$email_settings = [];
while ($row = $stmt->fetch()) {
    $email_settings[$row['setting_key']] = $row['setting_value'];
}

// Check if SMTP is configured
if (empty($email_settings['smtp_host']) || empty($email_settings['smtp_port'])) {
    echo json_encode(['success' => false, 'message' => 'SMTP settings are not configured']);
    exit();
}

try {
    // Create PHPMailer instance
    require_once '../vendor/autoload.php';
    $mail = new PHPMailer\PHPMailer\PHPMailer(true);
    
    // SMTP configuration
    $mail->isSMTP();
    $mail->Host = $email_settings['smtp_host'];
    $mail->Port = $email_settings['smtp_port'];
    
    if (!empty($email_settings['smtp_username'])) {
        $mail->SMTPAuth = true;
        $mail->Username = $email_settings['smtp_username'];
        $mail->Password = $email_settings['smtp_password'];
    }
    
    if (!empty($email_settings['smtp_secure'])) {
        $mail->SMTPSecure = $email_settings['smtp_secure'];
    }
    
    // Email content
    $site_name = $pdo->query("SELECT setting_value FROM system_settings WHERE setting_key = 'site_name'")->fetchColumn();
    $site_name = $site_name ?: 'Survey System';
    
    $mail->setFrom($email_settings['smtp_username'] ?? 'no-reply@example.com', $site_name);
    $mail->addAddress($email);
    $mail->Subject = 'Test Email from ' . $site_name;
    $mail->Body = 'This is a test email sent from the ' . $site_name . ' system.';
    
    $mail->send();
    echo json_encode(['success' => true]);
} catch (Exception $e) {
    echo json_encode(['success' => false, 'message' => $e->getMessage()]);
}
?>      admin/setiings.php:    <?php
require_once '../includes/auth.php';
requireAdmin();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    foreach ($_POST['settings'] as $key => $value) {
        // Check if setting exists
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM system_settings WHERE setting_key = ?");
        $stmt->execute([$key]);
        $exists = $stmt->fetchColumn();
        
        if ($exists) {
            // Update existing setting
            $stmt = $pdo->prepare("UPDATE system_settings SET setting_value = ? WHERE setting_key = ?");
            $stmt->execute([$value, $key]);
        } else {
            // Insert new setting
            $stmt = $pdo->prepare("INSERT INTO system_settings (setting_key, setting_value, setting_group) VALUES (?, ?, 'general')");
            $stmt->execute([$key, $value]);
        }
    }
    
    // Handle file uploads (logo, favicon)
    if (!empty($_FILES['site_logo']['name'])) {
        $upload_dir = '../assets/images/';
        $filename = 'logo.' . pathinfo($_FILES['site_logo']['name'], PATHINFO_EXTENSION);
        $filepath = $upload_dir . $filename;
        
        if (move_uploaded_file($_FILES['site_logo']['tmp_name'], $filepath)) {
            // Update logo setting
            $stmt = $pdo->prepare("REPLACE INTO system_settings (setting_key, setting_value, setting_group) VALUES ('site_logo', ?, 'appearance')");
            $stmt->execute([$filename]);
        }
    }
    
    if (!empty($_FILES['favicon']['name'])) {
        $upload_dir = '../assets/images/';
        $filename = 'favicon.' . pathinfo($_FILES['favicon']['name'], PATHINFO_EXTEXTENSION);
        $filepath = $upload_dir . $filename;
        
        if (move_uploaded_file($_FILES['favicon']['tmp_name'], $filepath)) {
            // Update favicon setting
            $stmt = $pdo->prepare("REPLACE INTO system_settings (setting_key, setting_value, setting_group) VALUES ('favicon', ?, 'appearance')");
            $stmt->execute([$filename]);
        }
    }
    
    $_SESSION['success'] = "Settings updated successfully!";
    header("Location: settings.php");
    exit();
}

// Get all settings grouped by category
$settings = [];
$stmt = $pdo->query("SELECT * FROM system_settings ORDER BY setting_group, setting_key");
while ($row = $stmt->fetch()) {
    $settings[$row['setting_group']][] = $row;
}

// Default settings if not in database
$default_settings = [
    'general' => [
        ['setting_key' => 'site_name', 'setting_value' => 'School Survey System'],
        ['setting_key' => 'site_email', 'setting_value' => 'admin@school.edu'],
        ['setting_key' => 'timezone', 'setting_value' => 'UTC'],
        ['setting_key' => 'items_per_page', 'setting_value' => '10']
    ],
    'appearance' => [
        ['setting_key' => 'site_logo', 'setting_value' => ''],
        ['setting_key' => 'favicon', 'setting_value' => ''],
        ['setting_key' => 'theme_color', 'setting_value' => '#3498db']
    ],
    'email' => [
        ['setting_key' => 'smtp_host', 'setting_value' => ''],
        ['setting_key' => 'smtp_port', 'setting_value' => '587'],
        ['setting_key' => 'smtp_username', 'setting_value' => ''],
        ['setting_key' => 'smtp_password', 'setting_value' => ''],
        ['setting_key' => 'smtp_secure', 'setting_value' => 'tls']
    ]
];

// Merge default settings with database settings
foreach ($default_settings as $group => $group_settings) {
    if (!isset($settings[$group])) {
        $settings[$group] = [];
    }
    
    foreach ($group_settings as $setting) {
        $found = false;
        foreach ($settings[$group] as $db_setting) {
            if ($db_setting['setting_key'] === $setting['setting_key']) {
                $found = true;
                break;
            }
        }
        
        if (!$found) {
            $settings[$group][] = $setting;
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>System Settings - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <style>
        .settings-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .settings-tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
        }
        .settings-tab.active {
            border-color: #ddd;
            border-bottom-color: white;
            background: white;
            margin-bottom: -1px;
        }
        .settings-tab-content {
            display: none;
            background: white;
            padding: 20px;
            border-radius: 0 5px 5px 5px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .settings-tab-content.active {
            display: block;
        }
        .setting-group {
            margin-bottom: 30px;
        }
        .setting-group h3 {
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .setting-item {
            margin-bottom: 15px;
        }
        .setting-item label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .setting-item input[type="text"],
        .setting-item input[type="email"],
        .setting-item input[type="number"],
        .setting-item input[type="password"],
        .setting-item select,
        .setting-item textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .file-preview {
            max-width: 200px;
            max-height: 100px;
            display: block;
            margin-top: 10px;
        }
        .color-preview {
            width: 30px;
            height: 30px;
            display: inline-block;
            vertical-align: middle;
            margin-left: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>System Settings</h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php">Categories</a>
                <a href="users.php">Users</a>
                <a href="results.php">Results</a>
                <a href="settings.php" class="active">Settings</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <?php if (isset($_SESSION['success'])): ?>
                <div class="success-message"><?php echo $_SESSION['success']; unset($_SESSION['success']); ?></div>
            <?php endif; ?>
            
            <form method="POST" enctype="multipart/form-data">
                <div class="settings-tabs">
                    <div class="settings-tab active" data-tab="general">General</div>
                    <div class="settings-tab" data-tab="appearance">Appearance</div>
                    <div class="settings-tab" data-tab="email">Email</div>
                </div>
                
                <div class="settings-tab-content active" id="general-tab">
                    <div class="setting-group">
                        <h3>Site Information</h3>
                        
                        <div class="setting-item">
                            <label for="site_name">Site Name</label>
                            <input type="text" id="site_name" name="settings[site_name]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'general', 'site_name')); ?>">
                        </div>
                        
                        <div class="setting-item">
                            <label for="site_email">Site Email</label>
                            <input type="email" id="site_email" name="settings[site_email]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'general', 'site_email')); ?>">
                        </div>
                        
                        <div class="setting-item">
                            <label for="timezone">Timezone</label>
                            <select id="timezone" name="settings[timezone]">
                                <?php
                                $timezones = DateTimeZone::listIdentifiers();
                                $current_tz = getSettingValue($settings, 'general', 'timezone');
                                foreach ($timezones as $tz): ?>
                                    <option value="<?php echo $tz; ?>" <?php echo $tz === $current_tz ? 'selected' : ''; ?>>
                                        <?php echo $tz; ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        
                        <div class="setting-item">
                            <label for="items_per_page">Items Per Page</label>
                            <input type="number" id="items_per_page" name="settings[items_per_page]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'general', 'items_per_page')); ?>">
                        </div>
                    </div>
                </div>
                
                <div class="settings-tab-content" id="appearance-tab">
                    <div class="setting-group">
                        <h3>Branding</h3>
                        
                        <div class="setting-item">
                            <label for="site_logo">Site Logo</label>
                            <input type="file" id="site_logo" name="site_logo" accept="image/*">
                            <?php if ($logo = getSettingValue($settings, 'appearance', 'site_logo')): ?>
                                <img src="../assets/images/<?php echo $logo; ?>" class="file-preview">
                                <p>Current: <?php echo $logo; ?></p>
                            <?php endif; ?>
                        </div>
                        
                        <div class="setting-item">
                            <label for="favicon">Favicon</label>
                            <input type="file" id="favicon" name="favicon" accept="image/x-icon,.ico">
                            <?php if ($favicon = getSettingValue($settings, 'appearance', 'favicon')): ?>
                                <img src="../assets/images/<?php echo $favicon; ?>" class="file-preview">
                                <p>Current: <?php echo $favicon; ?></p>
                            <?php endif; ?>
                        </div>
                        
                        <div class="setting-item">
                            <label for="theme_color">Theme Color</label>
                            <input type="color" id="theme_color" name="settings[theme_color]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'appearance', 'theme_color')); ?>">
                            <span class="color-preview" id="color-preview" 
                                  style="background-color: <?php echo htmlspecialchars(getSettingValue($settings, 'appearance', 'theme_color')); ?>"></span>
                        </div>
                    </div>
                </div>
                
                <div class="settings-tab-content" id="email-tab">
                    <div class="setting-group">
                        <h3>SMTP Settings</h3>
                        
                        <div class="setting-item">
                            <label for="smtp_host">SMTP Host</label>
                            <input type="text" id="smtp_host" name="settings[smtp_host]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'email', 'smtp_host')); ?>">
                        </div>
                        
                        <div class="setting-item">
                            <label for="smtp_port">SMTP Port</label>
                            <input type="number" id="smtp_port" name="settings[smtp_port]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'email', 'smtp_port')); ?>">
                        </div>
                        
                        <div class="setting-item">
                            <label for="smtp_username">SMTP Username</label>
                            <input type="text" id="smtp_username" name="settings[smtp_username]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'email', 'smtp_username')); ?>">
                        </div>
                        
                        <div class="setting-item">
                            <label for="smtp_password">SMTP Password</label>
                            <input type="password" id="smtp_password" name="settings[smtp_password]" 
                                   value="<?php echo htmlspecialchars(getSettingValue($settings, 'email', 'smtp_password')); ?>">
                        </div>
                        
                        <div class="setting-item">
                            <label for="smtp_secure">SMTP Security</label>
                            <select id="smtp_secure" name="settings[smtp_secure]">
                                <option value="">None</option>
                                <option value="tls" <?php echo getSettingValue($settings, 'email', 'smtp_secure') === 'tls' ? 'selected' : ''; ?>>TLS</option>
                                <option value="ssl" <?php echo getSettingValue($settings, 'email', 'smtp_secure') === 'ssl' ? 'selected' : ''; ?>>SSL</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="setting-group">
                        <h3>Test Email</h3>
                        <div class="setting-item">
                            <label for="test_email">Send test email to:</label>
                            <input type="email" id="test_email" name="test_email" placeholder="Enter email address">
                            <button type="button" id="send-test-email" class="btn">Send Test Email</button>
                            <div id="test-email-result" style="margin-top: 10px;"></div>
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save Settings</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // Tab switching
        document.querySelectorAll('.settings-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs and content
                document.querySelectorAll('.settings-tab, .settings-tab-content').forEach(el => {
                    el.classList.remove('active');
                });
                
                // Add active class to clicked tab and corresponding content
                this.classList.add('active');
                const tabId = this.getAttribute('data-tab');
                document.getElementById(`${tabId}-tab`).classList.add('active');
            });
        });
        
        // Color preview
        document.getElementById('theme_color').addEventListener('input', function() {
            document.getElementById('color-preview').style.backgroundColor = this.value;
        });
        
        // Test email
        document.getElementById('send-test-email').addEventListener('click', function() {
            const email = document.getElementById('test_email').value;
            if (!email) {
                alert('Please enter an email address');
                return;
            }
            
            const btn = this;
            btn.disabled = true;
            btn.textContent = 'Sending...';
            
            const resultDiv = document.getElementById('test-email-result');
            resultDiv.textContent = '';
            resultDiv.className = '';
            
            fetch('send_test_email.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `email=${encodeURIComponent(email)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultDiv.textContent = 'Test email sent successfully!';
                    resultDiv.className = 'success-message';
                } else {
                    resultDiv.textContent = 'Error: ' + (data.message || 'Failed to send email');
                    resultDiv.className = 'error-message';
                }
            })
            .catch(error => {
                resultDiv.textContent = 'Error: ' + error.message;
                resultDiv.className = 'error-message';
            })
            .finally(() => {
                btn.disabled = false;
                btn.textContent = 'Send Test Email';
            });
        });
    </script>
</body>
</html>

<?php
function getSettingValue($settings, $group, $key) {
    if (!isset($settings[$group])) return '';
    
    foreach ($settings[$group] as $setting) {
        if ($setting['setting_key'] === $key) {
            return $setting['setting_value'];
        }
    }
    
    return '';
}
?>    admin/survey_builder.php:   <?php
require_once '../includes/auth.php';
requireAdmin();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['create_survey'])) {
        // Save survey basic info
        $title = $_POST['title'];
        $description = $_POST['description'];
        $category_id = $_POST['category_id'];
        $target_roles = json_encode($_POST['target_roles']);
        $starts_at = $_POST['starts_at'];
        $ends_at = $_POST['ends_at'];
        
        $stmt = $pdo->prepare("INSERT INTO surveys (title, description, category_id, target_roles, created_by, starts_at, ends_at) VALUES (?, ?, ?, ?, ?, ?, ?)");
        $stmt->execute([$title, $description, $category_id, $target_roles, $_SESSION['user_id'], $starts_at, $ends_at]);
        $survey_id = $pdo->lastInsertId();
        
        // Save fields
        if (!empty($_POST['fields'])) {
            foreach ($_POST['fields'] as $field) {
                $options = null;
                if (in_array($field['type'], ['radio', 'checkbox', 'select'])) {
                    $options = json_encode(explode("\n", $field['options']));
                }
                
                $validation = null;
                if (!empty($field['validation'])) {
                    $validation = json_encode($field['validation']);
                }
                
                $stmt = $pdo->prepare("INSERT INTO survey_fields (survey_id, field_type, field_label, field_name, field_options, is_required, validation_rules, display_order) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                $stmt->execute([
                    $survey_id,
                    $field['type'],
                    $field['label'],
                    $field['name'],
                    $options,
                    isset($field['required']) ? 1 : 0,
                    $validation,
                    $field['order']
                ]);
            }
        }
        
        $_SESSION['success'] = "Survey created successfully!";
        header("Location: survey_preview.php?id=$survey_id");
        exit();
    }
}

// Get categories
$categories = $pdo->query("SELECT * FROM survey_categories ORDER BY name")->fetchAll();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Survey Builder - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .builder-container {
            display: flex;
            gap: 20px;
        }
        .form-preview {
            flex: 1;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 5px;
        }
        .fields-panel {
            width: 300px;
            background: #f0f0f0;
            padding: 15px;
            border-radius: 5px;
        }
        .field-item {
            background: white;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 3px;
            cursor: move;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .form-field {
            margin-bottom: 15px;
            padding: 15px;
            background: white;
            border-radius: 3px;
            border: 1px dashed #ccc;
        }
        .field-options {
            margin-top: 10px;
            padding: 10px;
            background: #f5f5f5;
            border-radius: 3px;
            display: none;
        }
        .field-config {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #eee;
        }
        .sortable-ghost {
            opacity: 0.5;
            background: #c8ebfb;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Survey Builder</h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php" class="active">Survey Builder</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <?php if (isset($_SESSION['success'])): ?>
                <div class="success-message"><?php echo $_SESSION['success']; unset($_SESSION['success']); ?></div>
            <?php endif; ?>
            
            <form id="survey-form" method="POST">
                <div class="form-section">
                    <h2>Survey Information</h2>
                    <div class="form-group">
                        <label for="title">Survey Title:</label>
                        <input type="text" id="title" name="title" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <textarea id="description" name="description" rows="3"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="category_id">Category:</label>
                        <select id="category_id" name="category_id" required>
                            <option value="">Select Category</option>
                            <?php foreach ($categories as $category): ?>
                                <option value="<?php echo $category['id']; ?>"><?php echo htmlspecialchars($category['name']); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Target Audience:</label>
                        <div class="checkbox-group">
                            <label><input type="checkbox" name="target_roles[]" value="student"> Students</label>
                            <label><input type="checkbox" name="target_roles[]" value="teacher"> Teachers</label>
                            <label><input type="checkbox" name="target_roles[]" value="parent"> Parents</label>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="starts_at">Start Date/Time:</label>
                            <input type="datetime-local" id="starts_at" name="starts_at" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="ends_at">End Date/Time:</label>
                            <input type="datetime-local" id="ends_at" name="ends_at" required>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h2>Survey Fields</h2>
                    <div class="builder-container">
                        <div class="form-preview" id="form-preview">
                            <p>Drag fields from the right panel to build your form</p>
                        </div>
                        
                        <div class="fields-panel">
                            <h3>Available Fields</h3>
                            <div class="field-item" data-type="text">
                                <i class="fas fa-font"></i> Text Input
                            </div>
                            <div class="field-item" data-type="textarea">
                                <i class="fas fa-align-left"></i> Text Area
                            </div>
                            <div class="field-item" data-type="radio">
                                <i class="far fa-dot-circle"></i> Radio Buttons
                            </div>
                            <div class="field-item" data-type="checkbox">
                                <i class="far fa-check-square"></i> Checkboxes
                            </div>
                            <div class="field-item" data-type="select">
                                <i class="fas fa-caret-down"></i> Dropdown
                            </div>
                            <div class="field-item" data-type="number">
                                <i class="fas fa-hashtag"></i> Number
                            </div>
                            <div class="field-item" data-type="date">
                                <i class="far fa-calendar-alt"></i> Date
                            </div>
                            <div class="field-item" data-type="rating">
                                <i class="fas fa-star"></i> Rating
                            </div>
                            <div class="field-item" data-type="file">
                                <i class="fas fa-file-upload"></i> File Upload
                            </div>
                        </div>
                    </div>
                </div>
                
                <input type="hidden" id="fields-data" name="fields">
                <div class="form-actions">
                    <button type="button" id="preview-btn" class="btn">Preview</button>
                    <button type="submit" name="create_survey" class="btn btn-primary">Create Survey</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Field Configuration Modal -->
    <div id="field-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3>Configure Field</h3>
            <form id="field-config-form">
                <input type="hidden" id="field-type">
                <input type="hidden" id="field-order">
                
                <div class="form-group">
                    <label for="field-label">Label:</label>
                    <input type="text" id="field-label" required>
                </div>
                
                <div class="form-group">
                    <label for="field-name">Field Name (unique):</label>
                    <input type="text" id="field-name" required>
                    <small>No spaces or special characters (use underscore _ )</small>
                </div>
                
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="field-required">
                        Required Field
                    </label>
                </div>
                
                <div id="options-container" class="field-options">
                    <div class="form-group">
                        <label for="field-options">Options (one per line):</label>
                        <textarea id="field-options" rows="4"></textarea>
                    </div>
                </div>
                
                <div id="validation-container" class="field-config">
                    <h4>Validation Rules</h4>
                    <div class="form-group">
                        <label for="validation-min">Min Value/Length:</label>
                        <input type="number" id="validation-min">
                    </div>
                    
                    <div class="form-group">
                        <label for="validation-max">Max Value/Length:</label>
                        <input type="number" id="validation-max">
                    </div>
                    
                    <div class="form-group">
                        <label for="validation-regex">Regex Pattern:</label>
                        <input type="text" id="validation-regex">
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="button" id="cancel-field" class="btn">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Field</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Preview Modal -->
    <div id="preview-modal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <span class="close-modal">&times;</span>
            <h2>Survey Preview</h2>
            <div id="survey-preview-content"></div>
            <div class="form-actions">
                <button type="button" class="btn close-modal">Close</button>
            </div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
    <script src="../assets/js/survey_builder.js"></script>
</body>
</html>     admin/survey_preview.php  <?php
require_once '../includes/auth.php';
requireAdmin();

$survey_id = $_GET['id'] ?? 0;

// Get survey info
$stmt = $pdo->prepare("SELECT * FROM surveys WHERE id = ?");
$stmt->execute([$survey_id]);
$survey = $stmt->fetch();

if (!$survey) {
    header("Location: surveys.php");
    exit();
}

// Get survey fields
$stmt = $pdo->prepare("SELECT * FROM survey_fields WHERE survey_id = ? ORDER BY display_order");
$stmt->execute([$survey_id]);
$fields = $stmt->fetchAll();

// Get target roles
$target_roles = json_decode($survey['target_roles'], true);
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Survey Preview - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Survey Preview: <?php echo htmlspecialchars($survey['title']); ?></h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php">Categories</a>
                <a href="users.php">Users</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <div class="survey-info">
                <h2>Survey Information</h2>
                <p><strong>Title:</strong> <?php echo htmlspecialchars($survey['title']); ?></p>
                <p><strong>Description:</strong> <?php echo htmlspecialchars($survey['description']); ?></p>
                <p><strong>Target Audience:</strong> 
                    <?php 
                    $roleNames = [
                        'student' => 'Students',
                        'teacher' => 'Teachers',
                        'parent' => 'Parents'
                    ];
                    $targetNames = array_map(function($role) use ($roleNames) {
                        return $roleNames[$role] ?? ucfirst($role);
                    }, $target_roles);
                    echo implode(', ', $targetNames);
                    ?>
                </p>
                <p><strong>Status:</strong> 
                    <?php if ($survey['is_active'] && $survey['starts_at'] <= date('Y-m-d H:i:s') && $survey['ends_at'] >= date('Y-m-d H:i:s')): ?>
                        <span class="status-active">Active</span>
                    <?php elseif (!$survey['is_active']): ?>
                        <span class="status-inactive">Inactive</span>
                    <?php else: ?>
                        <span class="status-pending">Pending/Scheduled</span>
                    <?php endif; ?>
                </p>
                <p><strong>Availability:</strong> 
                    <?php echo date('M j, Y g:i A', strtotime($survey['starts_at'])); ?> to 
                    <?php echo date('M j, Y g:i A', strtotime($survey['ends_at'])); ?>
                </p>
            </div>
            
            <div class="survey-preview">
                <h2>Survey Preview</h2>
                <div class="preview-container">
                    <?php foreach ($fields as $field): ?>
                        <div class="preview-field">
                            <h3><?php echo htmlspecialchars($field['field_label']); ?>
                                <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                            </h3>
                            
                            <?php if ($field['field_type'] === 'text'): ?>
                                <input type="text" disabled placeholder="Text input">
                            
                            <?php elseif ($field['field_type'] === 'textarea'): ?>
                                <textarea rows="3" disabled placeholder="Textarea input"></textarea>
                            
                            <?php elseif ($field['field_type'] === 'radio'): ?>
                                <div class="options">
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <label class="option">
                                            <input type="radio" name="preview_<?php echo $field['id']; ?>" disabled>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                            
                            <?php elseif ($field['field_type'] === 'checkbox'): ?>
                                <div class="options">
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <label class="option">
                                            <input type="checkbox" disabled>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                            
                            <?php elseif ($field['field_type'] === 'select'): ?>
                                <select disabled>
                                    <option value="">Select an option</option>
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <option><?php echo htmlspecialchars($option); ?></option>
                                    <?php endforeach; ?>
                                </select>
                            
                            <?php elseif ($field['field_type'] === 'number'): ?>
                                <input type="number" disabled placeholder="Number input">
                            
                            <?php elseif ($field['field_type'] === 'date'): ?>
                                <input type="date" disabled>
                            
                            <?php elseif ($field['field_type'] === 'rating'): ?>
                                <div class="rating-container">
                                    <span class="rating-star">★</span>
                                    <span class="rating-star">★</span>
                                    <span class="rating-star">★</span>
                                    <span class="rating-star">★</span>
                                    <span class="rating-star">★</span>
                                    <div class="rating-labels">
                                        <span>1 (Poor)</span>
                                        <span>5 (Excellent)</span>
                                    </div>
                                </div>
                            
                            <?php elseif ($field['field_type'] === 'file'): ?>
                                <input type="file" disabled>
                            <?php endif; ?>
                            
                            <div class="field-meta">
                                <p><strong>Field Type:</strong> <?php echo ucfirst(str_replace('_', ' ', $field['field_type'])); ?></p>
                                <p><strong>Field Name:</strong> <?php echo $field['field_name']; ?></p>
                                <p><strong>Required:</strong> <?php echo $field['is_required'] ? 'Yes' : 'No'; ?></p>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>
            
            <div class="form-actions">
                <a href="survey_builder.php?survey_id=<?php echo $survey['id']; ?>" class="btn btn-edit">Edit Survey</a>
                <a href="results.php?survey_id=<?php echo $survey['id']; ?>" class="btn btn-primary">View Results</a>
            </div>
        </div>
    </div>
</body>
</html>    admin/surveys.php:  <?php
require_once '../includes/auth.php';
requireLogin();

$survey_id = $_GET['id'] ?? 0;

// Get survey info
$stmt = $pdo->prepare("SELECT * FROM surveys WHERE id = ? AND is_active = TRUE");
$stmt->execute([$survey_id]);
$survey = $stmt->fetch();

if (!$survey) {
    header("Location: dashboard.php");
    exit();
}

// Check if user has already completed this survey
$stmt = $pdo->prepare("SELECT COUNT(*) FROM responses WHERE survey_id = ? AND user_id = ?");
$stmt->execute([$survey_id, $_SESSION['user_id']]);
$completed = $stmt->fetchColumn() > 0;

if ($completed) {
    header("Location: dashboard.php");
    exit();
}

// Get questions for this survey
$stmt = $pdo->prepare("SELECT * FROM questions WHERE survey_id = ? ORDER BY id");
$stmt->execute([$survey_id]);
$questions = $stmt->fetchAll();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $success = true;
    
    foreach ($questions as $question) {
        $response = $_POST['responses'][$question['id']] ?? '';
        
        // Validate required questions
        if ($question['is_required'] && empty($response)) {
            $success = false;
            $error = "Please answer all required questions";
            break;
        }
        
        // Validate rating questions
        if ($question['question_type'] === 'rating' && !empty($response)) {
            $rating = intval($response);
            if ($rating < 1 || $rating > 5) {
                $success = false;
                $error = "Please provide a valid rating between 1 and 5";
                break;
            }
        }
    }
    
    if ($success) {
        // Save responses
        foreach ($questions as $question) {
            $response = $_POST['responses'][$question['id']] ?? null;
            
            if ($response !== null) {
                $stmt = $pdo->prepare("INSERT INTO responses (survey_id, question_id, user_id, response) VALUES (?, ?, ?, ?)");
                $stmt->execute([$survey_id, $question['id'], $_SESSION['user_id'], $response]);
            }
        }
        
        header("Location: dashboard.php?completed=1");
        exit();
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Survey: <?php echo htmlspecialchars($survey['title']); ?> - Parent Survey System</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1><?php echo htmlspecialchars($survey['title']); ?></h1>
            <nav>
                <a href="dashboard.php">Back to Dashboard</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="survey-content">
            <?php if (isset($error)): ?>
                <div class="error-message"><?php echo $error; ?></div>
            <?php endif; ?>
            
            <div class="survey-description">
                <p><?php echo htmlspecialchars($survey['description']); ?></p>
            </div>
            
            <form id="survey-form" method="POST">
                <?php foreach ($questions as $question): ?>
                    <div class="question" data-required="<?php echo $question['is_required'] ? 'true' : 'false'; ?>">
                        <h3>
                            <?php echo htmlspecialchars($question['question_text']); ?>
                            <?php if ($question['is_required']): ?>
                                <span class="required">*</span>
                            <?php endif; ?>
                        </h3>
                        
                        <?php if ($question['question_type'] === 'multiple_choice'): ?>
                            <?php 
                            $options = json_decode($question['options'], true);
                            if (is_array($options)): ?>
                                <div class="options">
                                    <?php foreach ($options as $index => $option): ?>
                                        <label class="option">
                                            <input type="radio" name="responses[<?php echo $question['id']; ?>]" value="<?php echo htmlspecialchars($option); ?>" <?php echo $question['is_required'] ? 'required' : ''; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                            <?php endif; ?>
                        <?php elseif ($question['question_type'] === 'text'): ?>
                            <textarea name="responses[<?php echo $question['id']; ?>]" <?php echo $question['is_required'] ? 'required' : ''; ?>></textarea>
                        <?php elseif ($question['question_type'] === 'rating'): ?>
                            <div class="rating-container">
                                <input type="hidden" name="responses[<?php echo $question['id']; ?>]" value="">
                                <?php for ($i = 1; $i <= 5; $i++): ?>
                                    <span class="rating-star" data-value="<?php echo $i; ?>">★</span>
                                <?php endfor; ?>
                                <div class="rating-labels">
                                    <span>1 (Poor)</span>
                                    <span>5 (Excellent)</span>
                                </div>
                            </div>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Submit Survey</button>
                </div>
            </form>
        </div>
    </div>
    
    <script src="../assets/js/script.js"></script>
</body>
</html>   admin/users.php:   <?php
require_once '../includes/auth.php';
requireAdmin();

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['update_user'])) {
        $id = $_POST['id'];
        $username = $_POST['username'];
        $email = $_POST['email'];
        $role = $_POST['role'];
        
        // Check if username or email already exists (excluding current user)
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM users WHERE (username = ? OR email = ?) AND id != ?");
        $stmt->execute([$username, $email, $id]);
        $count = $stmt->fetchColumn();
        
        if ($count > 0) {
            $_SESSION['error'] = "Username or email already exists!";
        } else {
            $stmt = $pdo->prepare("UPDATE users SET username = ?, email = ?, role = ? WHERE id = ?");
            $stmt->execute([$username, $email, $role, $id]);
            $_SESSION['success'] = "User updated successfully!";
        }
    }
    
    if (isset($_POST['delete_user'])) {
        $id = $_POST['id'];
        
        // Prevent deleting own account
        if ($id == $_SESSION['user_id']) {
            $_SESSION['error'] = "You cannot delete your own account!";
        } else {
            $stmt = $pdo->prepare("DELETE FROM users WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['success'] = "User deleted successfully!";
        }
    }
    
    if (isset($_POST['reset_password'])) {
        $id = $_POST['id'];
        $password = password_hash('password123', PASSWORD_DEFAULT); // Default reset password
        
        $stmt = $pdo->prepare("UPDATE users SET password = ? WHERE id = ?");
        $stmt->execute([$password, $id]);
        $_SESSION['success'] = "Password reset to 'password123' successfully!";
    }
    
    header("Location: users.php");
    exit();
}

// Get all users
$users = $pdo->query("SELECT * FROM users ORDER BY role, username")->fetchAll();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Manage Users - Admin Panel</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Manage Users</h1>
            <nav>
                <a href="dashboard.php">Dashboard</a>
                <a href="surveys.php">Surveys</a>
                <a href="survey_builder.php">Survey Builder</a>
                <a href="categories.php">Categories</a>
                <a href="users.php" class="active">Users</a>
                <a href="results.php">Results</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="content">
            <?php if (isset($_SESSION['success'])): ?>
                <div class="success-message"><?php echo $_SESSION['success']; unset($_SESSION['success']); ?></div>
            <?php endif; ?>
            
            <?php if (isset($_SESSION['error'])): ?>
                <div class="error-message"><?php echo $_SESSION['error']; unset($_SESSION['error']); ?></div>
            <?php endif; ?>
            
            <div class="table-section">
                <h2>User Accounts</h2>
                
                <?php if (count($users) > 0): ?>
                    <table>
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Created</th>
                                <th>Last Login</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($users as $user): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($user['username']); ?></td>
                                    <td><?php echo htmlspecialchars($user['email']); ?></td>
                                    <td><?php echo ucfirst($user['role']); ?></td>
                                    <td><?php echo date('M j, Y', strtotime($user['created_at'])); ?></td>
                                    <td><?php echo $user['last_login'] ? date('M j, Y g:i a', strtotime($user['last_login'])) : 'Never'; ?></td>
                                    <td>
                                        <button type="button" class="btn btn-edit" onclick="openEditModal(
                                            <?php echo $user['id']; ?>,
                                            '<?php echo htmlspecialchars($user['username'], ENT_QUOTES); ?>',
                                            '<?php echo htmlspecialchars($user['email'], ENT_QUOTES); ?>',
                                            '<?php echo $user['role']; ?>'
                                        )">Edit</button>
                                        
                                        <form method="POST" style="display:inline;">
                                            <input type="hidden" name="id" value="<?php echo $user['id']; ?>">
                                            <button type="submit" name="reset_password" class="btn btn-reset" onclick="return confirm('Reset password to default?')">Reset Password</button>
                                        </form>
                                        
                                        <?php if ($user['id'] != $_SESSION['user_id']): ?>
                                            <form method="POST" style="display:inline;">
                                                <input type="hidden" name="id" value="<?php echo $user['id']; ?>">
                                                <button type="submit" name="delete_user" class="btn btn-delete" onclick="return confirm('Are you sure you want to delete this user?')">Delete</button>
                                            </form>
                                        <?php endif; ?>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php else: ?>
                    <p>No users found.</p>
                <?php endif; ?>
            </div>
        </div>
    </div>
    
    <!-- Edit User Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeEditModal()">&times;</span>
            <h2>Edit User</h2>
            <form id="editForm" method="POST">
                <input type="hidden" name="id" id="editId">
                <input type="hidden" name="update_user">
                
                <div class="form-group">
                    <label for="editUsername">Username:</label>
                    <input type="text" id="editUsername" name="username" required>
                </div>
                
                <div class="form-group">
                    <label for="editEmail">Email:</label>
                    <input type="email" id="editEmail" name="email" required>
                </div>
                
                <div class="form-group">
                    <label for="editRole">Role:</label>
                    <select id="editRole" name="role" required>
                        <option value="admin">Admin</option>
                        <option value="teacher">Teacher</option>
                        <option value="parent">Parent</option>
                        <option value="student">Student</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update User</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // Edit modal functions
        function openEditModal(id, username, email, role) {
            document.getElementById('editId').value = id;
            document.getElementById('editUsername').value = username;
            document.getElementById('editEmail').value = email;
            document.getElementById('editRole').value = role;
            document.getElementById('editModal').style.display = 'block';
        }
        
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</body>
</html>   assets/css/admin.css:   /* Admin-specific styles */

/* Theme color variables */
:root {
    --primary-color: <?php echo THEME_COLOR; ?>;
    --primary-dark: <?php echo adjustBrightness(THEME_COLOR, -20); ?>;
    --primary-light: <?php echo adjustBrightness(THEME_COLOR, 20); ?>;
}

/* Header with logo */
.admin-header {
    display: flex;
    align-items: center;
    padding: 0 20px;
    background-color: var(--primary-color);
    color: white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.admin-header .logo {
    display: flex;
    align-items: center;
    margin-right: auto;
}

.admin-header .logo img {
    height: 40px;
    margin-right: 10px;
}

.admin-header .logo h1 {
    margin: 0;
    font-size: 20px;
}

/* Sidebar navigation */
.admin-sidebar {
    width: 250px;
    background: #2c3e50;
    color: white;
    height: calc(100vh - 60px);
    position: fixed;
}

.admin-sidebar nav {
    padding: 20px 0;
}

.admin-sidebar nav a {
    display: block;
    color: #ecf0f1;
    padding: 12px 20px;
    text-decoration: none;
    transition: all 0.3s;
}

.admin-sidebar nav a:hover {
    background-color: rgba(255,255,255,0.1);
}

.admin-sidebar nav a.active {
    background-color: var(--primary-color);
    border-left: 4px solid white;
}

/* Main content area */
.admin-main {
    margin-left: 250px;
    padding: 20px;
    background: #f5f5f5;
    min-height: calc(100vh - 60px);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .admin-sidebar {
        width: 100%;
        height: auto;
        position: relative;
    }
    
    .admin-main {
        margin-left: 0;
    }
}

/* Custom tooltip */
.custom-tooltip {
    position: absolute;
    background: #333;
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 14px;
    z-index: 1000;
    pointer-events: none;
}

.custom-tooltip:after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #333 transparent transparent transparent;
}

/* Dark mode toggle */
.dark-mode-toggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
}

/* Dark mode styles */
body.dark-mode {
    background-color: #1a1a1a;
    color: #f0f0f0;
}

body.dark-mode .card,
body.dark-mode .modal-content {
    background-color: #2d2d2d;
    color: #f0f0f0;
}

body.dark-mode table {
    background-color: #2d2d2d;
    color: #f0f0f0;
}

body.dark-mode table th {
    background-color: #1a1a1a;
}        asstes/css/style.css:   /* Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

body {
    background-color: #f5f5f5;
    color: #333;
    line-height: 1.6;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    background-color: #2c3e50;
    color: white;
    padding: 20px 0;
    margin-bottom: 30px;
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

header h1 {
    font-size: 24px;
    margin-left: 20px;
}

nav a {
    color: white;
    text-decoration: none;
    margin-right: 20px;
    padding: 5px 10px;
    border-radius: 3px;
    transition: background-color 0.3s;
}

nav a:hover {
    background-color: #34495e;
}

/* Login Page */
.login-container {
    max-width: 400px;
    margin: 50px auto;
    padding: 30px;
    background: white;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.login-container h1 {
    text-align: center;
    margin-bottom: 20px;
    color: #2c3e50;
}

.login-container h2 {
    text-align: center;
    margin-bottom: 20px;
    color: #7f8c8d;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #2980b9;
}

.error {
    color: #e74c3c;
    margin-bottom: 20px;
    padding: 10px;
    background-color: #fadbd8;
    border-radius: 4px;
}

/* Dashboard Styles */
.stats-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.05);
    flex: 1;
    margin: 0 10px;
    text-align: center;
}

.stat-card h3 {
    color: #7f8c8d;
    margin-bottom: 10px;
    font-size: 16px;
}

.stat-card p {
    font-size: 24px;
    font-weight: bold;
    color: #2c3e50;
}

/* Tables */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background: white;
    box-shadow: 0 0 5px rgba(0,0,0,0.05);
}

th, td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #3498db;
    color: white;
}

tr:hover {
    background-color: #f5f5f5;
}

a {
    color: #3498db;
    text-decoration: none;
    margin-right: 10px;
}

a:hover {
    text-decoration: underline;
}

/* Survey Cards */
.survey-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.survey-card {
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
}

.survey-card h3 {
    color: #2c3e50;
    margin-bottom: 10px;
}

.survey-card p {
    color: #7f8c8d;
    margin-bottom: 15px;
}

.btn {
    display: inline-block;
    padding: 8px 15px;
    background-color: #2ecc71;
    color: white;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.btn:hover {
    background-color: #27ae60;
    text-decoration: none;
}

.completed {
    border-left: 5px solid #2ecc71;
}

.completed-text {
    color: #2ecc71 !important;
    font-weight: bold;
}
/* Additional styles for new components */

/* Switch toggle */
.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }
  
  input:checked + .slider {
    background-color: #2ecc71;
  }
  
  input:checked + .slider:before {
    transform: translateX(26px);
  }
  
  /* Question management */
  .question-item {
    background: white;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
  }
  
  .question-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .delete-question {
    background: #e74c3c;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
  }
  
  .options-container {
    margin: 10px 0;
  }
  
  .option-container {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .option-input {
    flex: 1;
    padding: 8px;
    margin-right: 5px;
  }
  
  .delete-option {
    background: #e74c3c;
    color: white;
    border: none;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    cursor: pointer;
  }
  
  .add-option {
    background: #3498db;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
  }
  
  /* Survey form */
  .required {
    color: #e74c3c;
  }
  
  .question {
    background: white;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
  }
  
  .question.error {
    border-left: 3px solid #e74c3c;
  }
  
  .options {
    margin-top: 10px;
  }
  
  .option {
    display: block;
    margin-bottom: 8px;
  }
  
  .rating-container {
    margin: 15px 0;
  }
  
  .rating-star {
    font-size: 24px;
    color: #ddd;
    cursor: pointer;
    margin-right: 5px;
  }
  
  .rating-star.active {
    color: #f1c40f;
  }
  
  .rating-labels {
    display: flex;
    justify-content: space-between;
    width: 200px;
    margin-top: 5px;
    color: #7f8c8d;
    font-size: 12px;
  }
  
  /* Results page */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .chart-container {
    margin: 20px 0;
  }
  
  .question-result {
    background: white;
    padding: 20px;
    margin-bottom: 30px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
  }
  
  .question-meta {
    color: #7f8c8d;
    font-size: 14px;
    margin-bottom: 15px;
  }
  
  .text-responses ul {
    list-style: none;
    margin: 10px 0;
  }
  
  .text-responses li {
    padding: 8px;
    border-bottom: 1px solid #eee;
  }
  
  /* Form actions */
  .form-actions {
    margin-top: 30px;
    text-align: right;
  }
  
  .btn-primary {
    background-color: #2ecc71;
  }
  
  .btn-primary:hover {
    background-color: #27ae60;
  }
  
  /* Messages */
  .success-message {
    background-color: #d4edda;
    color: #155724;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 20px;
  }
  
  .error-message {
    background-color: #f8d7da;
    color: #721c24;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 20px;
  }
/* Dashboard specific styles */
.dashboard-row {
    display: flex;
    gap: 20px;
    margin-top: 30px;
}

.dashboard-col {
    flex: 1;
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
}

.chart-container {
    background: white;
    padding: 20px;
    margin-top: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
}

/* Status indicators */
.status-active {
    color: #2ecc71;
    font-weight: bold;
}

.status-inactive {
    color: #e74c3c;
    font-weight: bold;
}

.status-pending {
    color: #f39c12;
    font-weight: bold;
}

/* Response styles */
.rating-display {
    font-size: 24px;
    line-height: 1;
}

.rating-display .rating-star {
    color: #ddd;
}

.rating-display .rating-star.active {
    color: #f1c40f;
}

.rating-display .rating-value {
    font-size: 16px;
    margin-left: 10px;
    color: #7f8c8d;
    vertical-align: middle;
}

/* Button variations */
.btn-edit {
    background-color: #3498db;
    color: white;
}

.btn-edit:hover {
    background-color: #2980b9;
}

.btn-delete {
    background-color: #e74c3c;
    color: white;
}

.btn-delete:hover {
    background-color: #c0392b;
}

.btn-reset {
    background-color: #f39c12;
    color: white;
}

.btn-reset:hover {
    background-color: #d35400;
}

/* Preview styles */
.preview-container {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 5px;
    margin-top: 20px;
}

.preview-field {
    background: white;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.field-meta {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #eee;
    font-size: 14px;
    color: #7f8c8d;
}

/* Modal styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
}

.modal-content {
    background-color: white;
    margin: 10% auto;
    padding: 20px;
    border-radius: 5px;
    width: 80%;
    max-width: 600px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    position: relative;
}

.close-modal {
    position: absolute;
    right: 20px;
    top: 10px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-modal:hover {
    color: #e74c3c;
}
/* User Dashboard Styles */
.survey-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.survey-card {
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    position: relative;
}

.survey-card.completed {
    border-left: 5px solid #2ecc71;
}

.survey-card h3 {
    margin-top: 0;
    color: #2c3e50;
}

.survey-description {
    color: #7f8c8d;
    margin: 10px 0;
    font-size: 14px;
}

.survey-meta {
    font-size: 13px;
    color: #7f8c8d;
    margin: 15px 0;
}

.survey-meta strong {
    color: #34495e;
}

.survey-status {
    display: inline-flex;
    align-items: center;
    background-color: #f5f5f5;
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 14px;
    color: #7f8c8d;
}

.survey-status.completed {
    background-color: #e8f5e9;
    color: #2ecc71;
}

.survey-status i {
    margin-right: 5px;
}

.no-surveys {
    text-align: center;
    padding: 40px;
    background: white;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    color: #7f8c8d;
}

/* Survey Response Page */
.progress-bar {
    height: 5px;
    background-color: #3498db;
    margin-bottom: 20px;
    border-radius: 3px;
    transition: width 0.3s;
}

.survey-header {
    background-color: #2c3e50;
    color: white;
    padding: 20px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.survey-title {
    margin: 0;
    font-size: 24px;
}

.survey-description {
    margin: 10px 0 0;
}

.survey-meta {
    margin-top: 15px;
    font-size: 14px;
}

.form-field {
    background: white;
    padding: 20px;
    margin-bottom: 15px;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.form-field.has-error {
    border-left: 3px solid #e74c3c;
}

.options {
    margin-top: 10px;
}

.option {
    display: block;
    margin-bottom: 8px;
}

.rating-container {
    margin: 15px 0;
}

.rating-star {
    font-size: 24px;
    color: #ddd;
    cursor: pointer;
    margin-right: 5px;
}

.rating-star.active {
    color: #f1c40f;
}

.rating-labels {
    display: flex;
    justify-content: space-between;
    width: 200px;
    margin-top: 5px;
    color: #7f8c8d;
    font-size: 12px;
}

.file-preview {
    max-width: 200px;
    max-height: 200px;
    display: block;
    margin-top: 10px;
    border: 1px solid #ddd;
    border-radius: 3px;
    padding: 3px;
}

.field-error {
    color: #e74c3c;
    font-size: 14px;
    margin-top //some missing}     assets/js/admin.js: // Admin-specific JavaScript functions

// Initialize all tooltips
function initTooltips() {
    const tooltips = document.querySelectorAll('[data-tooltip]');
    tooltips.forEach(tooltip => {
        tooltip.addEventListener('mouseover', function() {
            const tooltipText = this.getAttribute('data-tooltip');
            const tooltipElement = document.createElement('div');
            tooltipElement.className = 'custom-tooltip';
            tooltipElement.textContent = tooltipText;
            document.body.appendChild(tooltipElement);
            
            const rect = this.getBoundingClientRect();
            tooltipElement.style.top = `${rect.top - tooltipElement.offsetHeight - 5}px`;
            tooltipElement.style.left = `${rect.left + rect.width/2 - tooltipElement.offsetWidth/2}px`;
            
            this.addEventListener('mouseout', function() {
                document.body.removeChild(tooltipElement);
            });
        });
    });
}

// Confirm before executing destructive actions
function confirmAction(message) {
    return confirm(message || 'Are you sure you want to perform this action?');
}

// Initialize date pickers
function initDatePickers() {
    document.querySelectorAll('input[type="date"], input[type="datetime-local"]').forEach(input => {
        if (!input._flatpickr) {
            input._flatpickr = flatpickr(input, {
                enableTime: input.type === 'datetime-local',
                dateFormat: input.type === 'date' ? 'Y-m-d' : 'Y-m-d H:i',
                time_24hr: true
            });
        }
    });
}

// AJAX form submission
function handleAjaxForm(form, callback) {
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        
        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';
        
        fetch(form.action, {
            method: form.method,
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (typeof callback === 'function') {
                callback(data);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred. Please try again.');
        })
        .finally(() => {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        });
    });
}

// Initialize all admin functionality
document.addEventListener('DOMContentLoaded', function() {
    initTooltips();
    initDatePickers();
    
    // Handle all AJAX forms
    document.querySelectorAll('form.ajax-form').forEach(form => {
        handleAjaxForm(form, function(data) {
            if (data.success) {
                if (data.redirect) {
                    window.location.href = data.redirect;
                } else if (data.message) {
                    alert(data.message);
                }
            } else {
                alert(data.message || 'An error occurred');
            }
        });
    });
    
    // Confirm before delete
    document.querySelectorAll('form.delete-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!confirmAction('Are you sure you want to delete this item?')) {
                e.preventDefault();
            }
        });
    });
});      assets/js/script.js:   // Admin-specific JavaScript functions

// Initialize all tooltips
function initTooltips() {
    const tooltips = document.querySelectorAll('[data-tooltip]');
    tooltips.forEach(tooltip => {
        tooltip.addEventListener('mouseover', function() {
            const tooltipText = this.getAttribute('data-tooltip');
            const tooltipElement = document.createElement('div');
            tooltipElement.className = 'custom-tooltip';
            tooltipElement.textContent = tooltipText;
            document.body.appendChild(tooltipElement);
            
            const rect = this.getBoundingClientRect();
            tooltipElement.style.top = `${rect.top - tooltipElement.offsetHeight - 5}px`;
            tooltipElement.style.left = `${rect.left + rect.width/2 - tooltipElement.offsetWidth/2}px`;
            
            this.addEventListener('mouseout', function() {
                document.body.removeChild(tooltipElement);
            });
        });
    });
}

// Confirm before executing destructive actions
function confirmAction(message) {
    return confirm(message || 'Are you sure you want to perform this action?');
}

// Initialize date pickers
function initDatePickers() {
    document.querySelectorAll('input[type="date"], input[type="datetime-local"]').forEach(input => {
        if (!input._flatpickr) {
            input._flatpickr = flatpickr(input, {
                enableTime: input.type === 'datetime-local',
                dateFormat: input.type === 'date' ? 'Y-m-d' : 'Y-m-d H:i',
                time_24hr: true
            });
        }
    });
}

// AJAX form submission
function handleAjaxForm(form, callback) {
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        
        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';
        
        fetch(form.action, {
            method: form.method,
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (typeof callback === 'function') {
                callback(data);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred. Please try again.');
        })
        .finally(() => {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        });
    });
}

// Initialize all admin functionality
document.addEventListener('DOMContentLoaded', function() {
    initTooltips();
    initDatePickers();
    
    // Handle all AJAX forms
    document.querySelectorAll('form.ajax-form').forEach(form => {
        handleAjaxForm(form, function(data) {
            if (data.success) {
                if (data.redirect) {
                    window.location.href = data.redirect;
                } else if (data.message) {
                    alert(data.message);
                }
            } else {
                alert(data.message || 'An error occurred');
            }
        });
    });
    
    // Confirm before delete
    document.querySelectorAll('form.delete-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!confirmAction('Are you sure you want to delete this item?')) {
                e.preventDefault();
            }
        });
    });
});     assets/js/survey_builder.js:  document.addEventListener('DOMContentLoaded', function() {
    // Initialize variables
    const fieldsPanel = document.querySelector('.fields-panel');
    const formPreview = document.getElementById('form-preview');
    const fieldModal = document.getElementById('field-modal');
    const previewModal = document.getElementById('preview-modal');
    const fieldConfigForm = document.getElementById('field-config-form');
    const surveyForm = document.getElementById('survey-form');
    const fieldsData = document.getElementById('fields-data');
    
    let currentField = null;
    let fieldCounter = 0;
    
    // Initialize Sortable for fields panel
    new Sortable(formPreview, {
        group: {
            name: 'survey-builder',
            pull: 'clone',
            put: true
        },
        animation: 150,
        sort: false,
        ghostClass: 'sortable-ghost',
        onAdd: function(evt) {
            // When a field is added to the preview, configure it
            const fieldType = evt.item.dataset.type;
            evt.item.remove(); // Remove the dragged element
            
            // Create a new field element
            createNewField(fieldType, evt.newIndex);
        }
    });
    
    // Field type configuration
    const fieldTemplates = {
        text: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="text" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'fas fa-font'
        },
        textarea: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <textarea id="${fieldId}" name="${fieldId}" rows="3"></textarea>
                </div>
            `,
            icon: 'fas fa-align-left'
        },
        radio: {
            html: (fieldId, options) => {
                let optionsHtml = '';
                if (options && options.length) {
                    optionsHtml = options.map((opt, i) => `
                        <label class="option">
                            <input type="radio" name="${fieldId}" value="${opt.trim()}">
                            ${opt.trim()}
                        </label>
                    `).join('');
                } else {
                    optionsHtml = `
                        <label class="option">
                            <input type="radio" name="${fieldId}" value="Option 1">
                            Option 1
                        </label>
                        <label class="option">
                            <input type="radio" name="${fieldId}" value="Option 2">
                            Option 2
                        </label>
                    `;
                }
                return `
                    <div class="form-group">
                        <label>${fieldId}</label>
                        <div class="options">${optionsHtml}</div>
                    </div>
                `;
            },
            icon: 'far fa-dot-circle'
        },
        checkbox: {
            html: (fieldId, options) => {
                let optionsHtml = '';
                if (options && options.length) {
                    optionsHtml = options.map((opt, i) => `
                        <label class="option">
                            <input type="checkbox" name="${fieldId}[]" value="${opt.trim()}">
                            ${opt.trim()}
                        </label>
                    `).join('');
                } else {
                    optionsHtml = `
                        <label class="option">
                            <input type="checkbox" name="${fieldId}[]" value="Option 1">
                            Option 1
                        </label>
                        <label class="option">
                            <input type="checkbox" name="${fieldId}[]" value="Option 2">
                            Option 2
                        </label>
                    `;
                }
                return `
                    <div class="form-group">
                        <label>${fieldId}</label>
                        <div class="options">${optionsHtml}</div>
                    </div>
                `;
            },
            icon: 'far fa-check-square'
        },
        select: {
            html: (fieldId, options) => {
                let optionsHtml = '';
                if (options && options.length) {
                    optionsHtml = options.map(opt => `
                        <option value="${opt.trim()}">${opt.trim()}</option>
                    `).join('');
                } else {
                    optionsHtml = `
                        <option value="Option 1">Option 1</option>
                        <option value="Option 2">Option 2</option>
                    `;
                }
                return `
                    <div class="form-group">
                        <label for="${fieldId}">${fieldId}</label>
                        <select id="${fieldId}" name="${fieldId}">
                            <option value="">Select an option</option>
                            ${optionsHtml}
                        </select>
                    </div>
                `;
            },
            icon: 'fas fa-caret-down'
        },
        number: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="number" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'fas fa-hashtag'
        },
        date: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="date" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'far fa-calendar-alt'
        },
        rating: {
            html: (fieldId) => `
                <div class="form-group">
                    <label>${fieldId}</label>
                    <div class="rating-container">
                        <input type="hidden" name="${fieldId}" value="">
                        <span class="rating-star" data-value="1">★</span>
                        <span class="rating-star" data-value="2">★</span>
                        <span class="rating-star" data-value="3">★</span>
                        <span class="rating-star" data-value="4">★</span>
                        <span class="rating-star" data-value="5">★</span>
                        <div class="rating-labels">
                            <span>1 (Poor)</span>
                            <span>5 (Excellent)</span>
                        </div>
                    </div>
                </div>
            `,
            icon: 'fas fa-star'
        },
        file: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="file" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'fas fa-file-upload'
        }
    };
    
    // Create a new field in the preview
    function createNewField(type, position) {
        fieldCounter++;
        const fieldId = `field_${fieldCounter}`;
        
        // Show configuration modal
        currentField = {
            type: type,
            id: fieldId,
            label: `${type.charAt(0).toUpperCase() + type.slice(1)} Field`,
            name: fieldId,
            required: true,
            order: position,
            options: null,
            validation: {}
        };
        
        showFieldModal();
    }
    
    // Show field configuration modal
    function showFieldModal() {
        document.getElementById('field-type').value = currentField.type;
        document.getElementById('field-label').value = currentField.label;
        document.getElementById('field-name').value = currentField.name;
        document.getElementById('field-required').checked = currentField.required;
        document.getElementById('field-order').value = currentField.order;
        
        // Show/hide options based on field type
        const optionsContainer = document.getElementById('options-container');
        if (['radio', 'checkbox', 'select'].includes(currentField.type)) {
            optionsContainer.style.display = 'block';
            document.getElementById('field-options').value = currentField.options ? 
                currentField.options.join('\n') : 'Option 1\nOption 2';
        } else {
            optionsContainer.style.display = 'none';
        }
        
        // Set validation rules
        if (currentField.validation) {
            document.getElementById('validation-min').value = currentField.validation.min || '';
            document.getElementById('validation-max').value = currentField.validation.max || '';
            document.getElementById('validation-regex').value = currentField.validation.regex || '';
        }
        
        fieldModal.style.display = 'block';
    }
    
    // Save field configuration
    fieldConfigForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Update current field with form values
        currentField.label = document.getElementById('field-label').value;
        currentField.name = document.getElementById('field-name').value;
        currentField.required = document.getElementById('field-required').checked;
        currentField.order = document.getElementById('field-order').value;
        
        // Get options if applicable
        if (['radio', 'checkbox', 'select'].includes(currentField.type)) {
            const optionsText = document.getElementById('field-options').value;
            currentField.options = optionsText.split('\n').filter(opt => opt.trim() !== '');
        }
        
        // Get validation rules
        currentField.validation = {
            min: document.getElementById('validation-min').value || null,
            max: document.getElementById('validation-max').value || null,
            regex: document.getElementById('validation-regex').value || null
        };
        
        // Create the field element
        createFieldElement();
        
        // Close modal
        fieldModal.style.display = 'none';
    });
    
    // Create the actual field element in the preview
    function createFieldElement() {
        const fieldDiv = document.createElement('div');
        fieldDiv.className = 'form-field';
        fieldDiv.dataset.fieldId = currentField.id;
        fieldDiv.dataset.fieldType = currentField.type;
        
        // Add field HTML
        const template = fieldTemplates[currentField.type];
        fieldDiv.innerHTML = template.html(currentField.name, currentField.options);
        
        // Add field header with actions
        const fieldHeader = document.createElement('div');
        fieldHeader.className = 'field-header';
        fieldHeader.innerHTML = `
            <div class="field-title">
                <i class="${template.icon}"></i>
                ${currentField.label} (${currentField.name})
                ${currentField.required ? '<span class="required">*</span>' : ''}
            </div>
            <div class="field-actions">
                <button type="button" class="edit-field" title="Edit">
                    <i class="fas fa-edit"></i>
                </button>
                <button type="button" class="delete-field" title="Delete">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        fieldDiv.insertBefore(fieldHeader, fieldDiv.firstChild);
        
        // Add to preview at correct position
        const existingFields = formPreview.querySelectorAll('.form-field');
        if (existingFields.length > currentField.order) {
            formPreview.insertBefore(fieldDiv, existingFields[currentField.order]);
        } else {
            formPreview.appendChild(fieldDiv);
        }
        
        // Add event listeners for edit/delete
        fieldDiv.querySelector('.edit-field').addEventListener('click', function() {
            editField(fieldDiv);
        });
        
        fieldDiv.querySelector('.delete-field').addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this field?')) {
                fieldDiv.remove();
                updateFieldsData();
            }
        });
        
        // Make the field draggable for reordering
        new Sortable(fieldDiv, {
            group: 'survey-builder',
            handle: '.field-title',
            animation: 150,
            onEnd: function() {
                updateFieldsData();
            }
        });
        
        // Initialize any field-specific JS
        if (currentField.type === 'rating') {
            initRatingField(fieldDiv);
        }
        
        updateFieldsData();
    }
    
    // Edit existing field
    function editField(fieldDiv) {
        currentField = {
            type: fieldDiv.dataset.fieldType,
            id: fieldDiv.dataset.fieldId,
            label: fieldDiv.querySelector('.field-title').textContent.trim().split(' (')[0],
            name: fieldDiv.dataset.fieldName || fieldDiv.querySelector('input, select, textarea').name,
            required: fieldDiv.querySelector('.required') !== null,
            order: Array.from(formPreview.querySelectorAll('.form-field')).indexOf(fieldDiv),
            options: null,
            validation: {}
        };
        
        // For fields with options, get current options
        if (['radio', 'checkbox', 'select'].includes(currentField.type)) {
            const options = [];
            fieldDiv.querySelectorAll('.options input, .options select option').forEach(el => {
                if (el.value && !options.includes(el.value)) {
                    options.push(el.value);
                }
            });
            currentField.options = options;
        }
        
        showFieldModal();
    }
    
    // Initialize rating field interaction
    function initRatingField(fieldDiv) {
        const stars = fieldDiv.querySelectorAll('.rating-star');
        const hiddenInput = fieldDiv.querySelector('input[type="hidden"]');
        
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const value = parseInt(this.dataset.value);
                stars.forEach((s, i) => {
                    if (i < value) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
                hiddenInput.value = value;
            });
        });
    }
    
    // Update the hidden fields data input
    function updateFieldsData() {
        const fields = [];
        const fieldElements = formPreview.querySelectorAll('.form-field');
        
        fieldElements.forEach((fieldEl, index) => {
            const field = {
                type: fieldEl.dataset.fieldType,
                label: fieldEl.querySelector('.field-title').textContent.trim().split(' (')[0],
                name: fieldEl.querySelector('input, select, textarea').name,
                required: fieldEl.querySelector('.required') !== null,
                order: index
            };
            
            // Add options for relevant field types
            if (['radio', 'checkbox', 'select'].includes(field.type)) {
                const options = [];
                fieldEl.querySelectorAll('.options input, .options select option').forEach(el => {
                    if (el.value && !options.includes(el.value)) {
                        options.push(el.value);
                    }
                });
                field.options = options.join('\n');
            }
            
            fields.push(field);
        });
        
        fieldsData.value = JSON.stringify(fields);
    }
    
    // Preview button
    document.getElementById('preview-btn').addEventListener('click', function() {
        const previewContent = document.getElementById('survey-preview-content');
        previewContent.innerHTML = `
            <h3>${document.getElementById('title').value || 'Survey Title'}</h3>
            <p>${document.getElementById('description').value || 'Survey description'}</p>
            <hr>
            ${formPreview.innerHTML.replace(/field-actions/g, 'hidden-actions')}
        `;
        
        // Initialize rating fields in preview
        previewContent.querySelectorAll('.rating-container').forEach(container => {
            const stars = container.querySelectorAll('.rating-star');
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseInt(this.dataset.value);
                    stars.forEach((s, i) => {
                        if (i < value) {
                            s.classList.add('active');
                        } else {
                            s.classList.remove('active');
                        }
                    });
                    container.querySelector('input[type="hidden"]').value = value;
                });
            });
        });
        
        previewModal.style.display = 'block';
    });
    
    // Close modal buttons
    document.querySelectorAll('.close-modal').forEach(btn => {
        btn.addEventListener('click', function() {
            fieldModal.style.display = 'none';
            previewModal.style.display = 'none';
        });
    });
    
    // Cancel field button
    document.getElementById('cancel-field').addEventListener('click', function() {
        fieldModal.style.display = 'none';
    });
    
    // Close modals when clicking outside
    window.addEventListener('click', function(e) {
        if (e.target === fieldModal) {
            fieldModal.style.display = 'none';
        }
        if (e.target === previewModal) {
            previewModal.style.display = 'none';
        }
    });
});  includes/auth.php:  document.addEventListener('DOMContentLoaded', function() {
    // Initialize variables
    const fieldsPanel = document.querySelector('.fields-panel');
    const formPreview = document.getElementById('form-preview');
    const fieldModal = document.getElementById('field-modal');
    const previewModal = document.getElementById('preview-modal');
    const fieldConfigForm = document.getElementById('field-config-form');
    const surveyForm = document.getElementById('survey-form');
    const fieldsData = document.getElementById('fields-data');
    
    let currentField = null;
    let fieldCounter = 0;
    
    // Initialize Sortable for fields panel
    new Sortable(formPreview, {
        group: {
            name: 'survey-builder',
            pull: 'clone',
            put: true
        },
        animation: 150,
        sort: false,
        ghostClass: 'sortable-ghost',
        onAdd: function(evt) {
            // When a field is added to the preview, configure it
            const fieldType = evt.item.dataset.type;
            evt.item.remove(); // Remove the dragged element
            
            // Create a new field element
            createNewField(fieldType, evt.newIndex);
        }
    });
    
    // Field type configuration
    const fieldTemplates = {
        text: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="text" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'fas fa-font'
        },
        textarea: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <textarea id="${fieldId}" name="${fieldId}" rows="3"></textarea>
                </div>
            `,
            icon: 'fas fa-align-left'
        },
        radio: {
            html: (fieldId, options) => {
                let optionsHtml = '';
                if (options && options.length) {
                    optionsHtml = options.map((opt, i) => `
                        <label class="option">
                            <input type="radio" name="${fieldId}" value="${opt.trim()}">
                            ${opt.trim()}
                        </label>
                    `).join('');
                } else {
                    optionsHtml = `
                        <label class="option">
                            <input type="radio" name="${fieldId}" value="Option 1">
                            Option 1
                        </label>
                        <label class="option">
                            <input type="radio" name="${fieldId}" value="Option 2">
                            Option 2
                        </label>
                    `;
                }
                return `
                    <div class="form-group">
                        <label>${fieldId}</label>
                        <div class="options">${optionsHtml}</div>
                    </div>
                `;
            },
            icon: 'far fa-dot-circle'
        },
        checkbox: {
            html: (fieldId, options) => {
                let optionsHtml = '';
                if (options && options.length) {
                    optionsHtml = options.map((opt, i) => `
                        <label class="option">
                            <input type="checkbox" name="${fieldId}[]" value="${opt.trim()}">
                            ${opt.trim()}
                        </label>
                    `).join('');
                } else {
                    optionsHtml = `
                        <label class="option">
                            <input type="checkbox" name="${fieldId}[]" value="Option 1">
                            Option 1
                        </label>
                        <label class="option">
                            <input type="checkbox" name="${fieldId}[]" value="Option 2">
                            Option 2
                        </label>
                    `;
                }
                return `
                    <div class="form-group">
                        <label>${fieldId}</label>
                        <div class="options">${optionsHtml}</div>
                    </div>
                `;
            },
            icon: 'far fa-check-square'
        },
        select: {
            html: (fieldId, options) => {
                let optionsHtml = '';
                if (options && options.length) {
                    optionsHtml = options.map(opt => `
                        <option value="${opt.trim()}">${opt.trim()}</option>
                    `).join('');
                } else {
                    optionsHtml = `
                        <option value="Option 1">Option 1</option>
                        <option value="Option 2">Option 2</option>
                    `;
                }
                return `
                    <div class="form-group">
                        <label for="${fieldId}">${fieldId}</label>
                        <select id="${fieldId}" name="${fieldId}">
                            <option value="">Select an option</option>
                            ${optionsHtml}
                        </select>
                    </div>
                `;
            },
            icon: 'fas fa-caret-down'
        },
        number: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="number" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'fas fa-hashtag'
        },
        date: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="date" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'far fa-calendar-alt'
        },
        rating: {
            html: (fieldId) => `
                <div class="form-group">
                    <label>${fieldId}</label>
                    <div class="rating-container">
                        <input type="hidden" name="${fieldId}" value="">
                        <span class="rating-star" data-value="1">★</span>
                        <span class="rating-star" data-value="2">★</span>
                        <span class="rating-star" data-value="3">★</span>
                        <span class="rating-star" data-value="4">★</span>
                        <span class="rating-star" data-value="5">★</span>
                        <div class="rating-labels">
                            <span>1 (Poor)</span>
                            <span>5 (Excellent)</span>
                        </div>
                    </div>
                </div>
            `,
            icon: 'fas fa-star'
        },
        file: {
            html: (fieldId) => `
                <div class="form-group">
                    <label for="${fieldId}">${fieldId}</label>
                    <input type="file" id="${fieldId}" name="${fieldId}">
                </div>
            `,
            icon: 'fas fa-file-upload'
        }
    };
    
    // Create a new field in the preview
    function createNewField(type, position) {
        fieldCounter++;
        const fieldId = `field_${fieldCounter}`;
        
        // Show configuration modal
        currentField = {
            type: type,
            id: fieldId,
            label: `${type.charAt(0).toUpperCase() + type.slice(1)} Field`,
            name: fieldId,
            required: true,
            order: position,
            options: null,
            validation: {}
        };
        
        showFieldModal();
    }
    
    // Show field configuration modal
    function showFieldModal() {
        document.getElementById('field-type').value = currentField.type;
        document.getElementById('field-label').value = currentField.label;
        document.getElementById('field-name').value = currentField.name;
        document.getElementById('field-required').checked = currentField.required;
        document.getElementById('field-order').value = currentField.order;
        
        // Show/hide options based on field type
        const optionsContainer = document.getElementById('options-container');
        if (['radio', 'checkbox', 'select'].includes(currentField.type)) {
            optionsContainer.style.display = 'block';
            document.getElementById('field-options').value = currentField.options ? 
                currentField.options.join('\n') : 'Option 1\nOption 2';
        } else {
            optionsContainer.style.display = 'none';
        }
        
        // Set validation rules
        if (currentField.validation) {
            document.getElementById('validation-min').value = currentField.validation.min || '';
            document.getElementById('validation-max').value = currentField.validation.max || '';
            document.getElementById('validation-regex').value = currentField.validation.regex || '';
        }
        
        fieldModal.style.display = 'block';
    }
    
    // Save field configuration
    fieldConfigForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Update current field with form values
        currentField.label = document.getElementById('field-label').value;
        currentField.name = document.getElementById('field-name').value;
        currentField.required = document.getElementById('field-required').checked;
        currentField.order = document.getElementById('field-order').value;
        
        // Get options if applicable
        if (['radio', 'checkbox', 'select'].includes(currentField.type)) {
            const optionsText = document.getElementById('field-options').value;
            currentField.options = optionsText.split('\n').filter(opt => opt.trim() !== '');
        }
        
        // Get validation rules
        currentField.validation = {
            min: document.getElementById('validation-min').value || null,
            max: document.getElementById('validation-max').value || null,
            regex: document.getElementById('validation-regex').value || null
        };
        
        // Create the field element
        createFieldElement();
        
        // Close modal
        fieldModal.style.display = 'none';
    });
    
    // Create the actual field element in the preview
    function createFieldElement() {
        const fieldDiv = document.createElement('div');
        fieldDiv.className = 'form-field';
        fieldDiv.dataset.fieldId = currentField.id;
        fieldDiv.dataset.fieldType = currentField.type;
        
        // Add field HTML
        const template = fieldTemplates[currentField.type];
        fieldDiv.innerHTML = template.html(currentField.name, currentField.options);
        
        // Add field header with actions
        const fieldHeader = document.createElement('div');
        fieldHeader.className = 'field-header';
        fieldHeader.innerHTML = `
            <div class="field-title">
                <i class="${template.icon}"></i>
                ${currentField.label} (${currentField.name})
                ${currentField.required ? '<span class="required">*</span>' : ''}
            </div>
            <div class="field-actions">
                <button type="button" class="edit-field" title="Edit">
                    <i class="fas fa-edit"></i>
                </button>
                <button type="button" class="delete-field" title="Delete">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        fieldDiv.insertBefore(fieldHeader, fieldDiv.firstChild);
        
        // Add to preview at correct position
        const existingFields = formPreview.querySelectorAll('.form-field');
        if (existingFields.length > currentField.order) {
            formPreview.insertBefore(fieldDiv, existingFields[currentField.order]);
        } else {
            formPreview.appendChild(fieldDiv);
        }
        
        // Add event listeners for edit/delete
        fieldDiv.querySelector('.edit-field').addEventListener('click', function() {
            editField(fieldDiv);
        });
        
        fieldDiv.querySelector('.delete-field').addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this field?')) {
                fieldDiv.remove();
                updateFieldsData();
            }
        });
        
        // Make the field draggable for reordering
        new Sortable(fieldDiv, {
            group: 'survey-builder',
            handle: '.field-title',
            animation: 150,
            onEnd: function() {
                updateFieldsData();
            }
        });
        
        // Initialize any field-specific JS
        if (currentField.type === 'rating') {
            initRatingField(fieldDiv);
        }
        
        updateFieldsData();
    }
    
    // Edit existing field
    function editField(fieldDiv) {
        currentField = {
            type: fieldDiv.dataset.fieldType,
            id: fieldDiv.dataset.fieldId,
            label: fieldDiv.querySelector('.field-title').textContent.trim().split(' (')[0],
            name: fieldDiv.dataset.fieldName || fieldDiv.querySelector('input, select, textarea').name,
            required: fieldDiv.querySelector('.required') !== null,
            order: Array.from(formPreview.querySelectorAll('.form-field')).indexOf(fieldDiv),
            options: null,
            validation: {}
        };
        
        // For fields with options, get current options
        if (['radio', 'checkbox', 'select'].includes(currentField.type)) {
            const options = [];
            fieldDiv.querySelectorAll('.options input, .options select option').forEach(el => {
                if (el.value && !options.includes(el.value)) {
                    options.push(el.value);
                }
            });
            currentField.options = options;
        }
        
        showFieldModal();
    }
    
    // Initialize rating field interaction
    function initRatingField(fieldDiv) {
        const stars = fieldDiv.querySelectorAll('.rating-star');
        const hiddenInput = fieldDiv.querySelector('input[type="hidden"]');
        
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const value = parseInt(this.dataset.value);
                stars.forEach((s, i) => {
                    if (i < value) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
                hiddenInput.value = value;
            });
        });
    }
    
    // Update the hidden fields data input
    function updateFieldsData() {
        const fields = [];
        const fieldElements = formPreview.querySelectorAll('.form-field');
        
        fieldElements.forEach((fieldEl, index) => {
            const field = {
                type: fieldEl.dataset.fieldType,
                label: fieldEl.querySelector('.field-title').textContent.trim().split(' (')[0],
                name: fieldEl.querySelector('input, select, textarea').name,
                required: fieldEl.querySelector('.required') !== null,
                order: index
            };
            
            // Add options for relevant field types
            if (['radio', 'checkbox', 'select'].includes(field.type)) {
                const options = [];
                fieldEl.querySelectorAll('.options input, .options select option').forEach(el => {
                    if (el.value && !options.includes(el.value)) {
                        options.push(el.value);
                    }
                });
                field.options = options.join('\n');
            }
            
            fields.push(field);
        });
        
        fieldsData.value = JSON.stringify(fields);
    }
    
    // Preview button
    document.getElementById('preview-btn').addEventListener('click', function() {
        const previewContent = document.getElementById('survey-preview-content');
        previewContent.innerHTML = `
            <h3>${document.getElementById('title').value || 'Survey Title'}</h3>
            <p>${document.getElementById('description').value || 'Survey description'}</p>
            <hr>
            ${formPreview.innerHTML.replace(/field-actions/g, 'hidden-actions')}
        `;
        
        // Initialize rating fields in preview
        previewContent.querySelectorAll('.rating-container').forEach(container => {
            const stars = container.querySelectorAll('.rating-star');
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseInt(this.dataset.value);
                    stars.forEach((s, i) => {
                        if (i < value) {
                            s.classList.add('active');
                        } else {
                            s.classList.remove('active');
                        }
                    });
                    container.querySelector('input[type="hidden"]').value = value;
                });
            });
        });
        
        previewModal.style.display = 'block';
    });
    
    // Close modal buttons
    document.querySelectorAll('.close-modal').forEach(btn => {
        btn.addEventListener('click', function() {
            fieldModal.style.display = 'none';
            previewModal.style.display = 'none';
        });
    });
    
    // Cancel field button
    document.getElementById('cancel-field').addEventListener('click', function() {
        fieldModal.style.display = 'none';
    });
    
    // Close modals when clicking outside
    window.addEventListener('click', function(e) {
        if (e.target === fieldModal) {
            fieldModal.style.display = 'none';
        }
        if (e.target === previewModal) {
            previewModal.style.display = 'none';
        }
    });
});   includes/config.php:  <?php
// Error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Session start
session_start();

// Base URL
define('BASE_URL', 'http://localhost/survey');

// Timezone
date_default_timezone_set('Africa/Nairobi');
?>    include/db.php: <?php
require_once 'config.php';

class Database {
    private $host = 'localhost';
    private $user = 'root';
    private $pass = '';
    private $dbname = 'parent_survey_system';
    private $conn;

    public function __construct() {
        try {
            $this->conn = new PDO("mysql:host={$this->host};dbname={$this->dbname}", $this->user, $this->pass);
            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            $this->conn->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
            $this->conn->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
        } catch (PDOException $e) {
            error_log("Database connection failed: " . $e->getMessage());
            die("Database connection failed. Please try again later.");
        }
    }

    public function getConnection() {
        return $this->conn;
    }
}  includes/functions.php:  <?php
require_once 'db.php';

// Register new user
function registerUser($username, $email, $password, $role = 'parent') {
    global $pdo;
    
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);
    
    $stmt = $pdo->prepare("INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)");
    return $stmt->execute([$username, $email, $hashed_password, $role]);
}

// Login user
function loginUser($username, $password) {
    global $pdo;
    
    $stmt = $pdo->prepare("SELECT * FROM users WHERE username = ?");
    $stmt->execute([$username]);
    $user = $stmt->fetch();
    
    if ($user && password_verify($password, $user['password'])) {
        $_SESSION['user_id'] = $user['id'];
        $_SESSION['username'] = $user['username'];
        $_SESSION['role'] = $user['role'];
        return true;
    }
    return false;
}

// Get all active surveys
function getActiveSurveys() {
    global $pdo;
    
    $stmt = $pdo->query("SELECT * FROM surveys WHERE is_active = TRUE");
    return $stmt->fetchAll();
}

// Get survey questions
function getSurveyQuestions($survey_id) {
    global $pdo;
    
    $stmt = $pdo->prepare("SELECT * FROM questions WHERE survey_id = ?");
    $stmt->execute([$survey_id]);
    return $stmt->fetchAll();
}

// Get a system setting
function getSystemSetting($key, $default = '') {
    global $pdo;
    
    $stmt = $pdo->prepare("SELECT setting_value FROM system_settings WHERE setting_key = ?");
    $stmt->execute([$key]);
    $result = $stmt->fetchColumn();
    
    return $result !== false ? $result : $default;
}

// Apply system settings to the application
function applySystemSettings() {
    // Timezone
    $timezone = getSystemSetting('timezone', 'UTC');
    date_default_timezone_set($timezone);
    
    // Site name
    define('SITE_NAME', getSystemSetting('site_name', 'Survey System'));
    
    // Theme color
    define('THEME_COLOR', getSystemSetting('theme_color', '#3498db'));
}

?>   user/dashboard.php:  <?php
require_once '../includes/auth.php';
requireLogin();

// Get available surveys for the current user
$stmt = $pdo->prepare("
    SELECT s.*, 
           (SELECT COUNT(*) FROM survey_responses r WHERE r.survey_id = s.id AND r.user_id = ?) as completed
    FROM surveys s
    WHERE s.is_active = TRUE 
    AND s.starts_at <= NOW() 
    AND s.ends_at >= NOW()
    AND JSON_CONTAINS(s.target_roles, JSON_QUOTE(?))
    ORDER BY s.ends_at ASC
");
$stmt->execute([$_SESSION['user_id'], $_SESSION['role']]);
$surveys = $stmt->fetchAll();

// Get completed surveys count
$completedCount = $pdo->prepare("
    SELECT COUNT(DISTINCT survey_id) 
    FROM survey_responses 
    WHERE user_id = ?
");
$completedCount->execute([$_SESSION['user_id']]);
$completedSurveys = $completedCount->fetchColumn();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Dashboard - Survey System</title>
    <link rel="stylesheet" href="../assets/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Welcome, <?php echo htmlspecialchars($_SESSION['username']); ?></h1>
            <nav>
                <a href="dashboard.php" class="active">Dashboard</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Available Surveys</h3>
                <p><?php echo count($surveys); ?></p>
            </div>
            <div class="stat-card">
                <h3>Completed Surveys</h3>
                <p><?php echo $completedSurveys; ?></p>
            </div>
        </div>
        
        <div class="survey-list">
            <h2>Available Surveys</h2>
            
            <?php if (count($surveys) > 0): ?>
                <div class="survey-cards">
                    <?php foreach ($surveys as $survey): ?>
                        <div class="survey-card <?php echo $survey['completed'] ? 'completed' : ''; ?>">
                            <h3><?php echo htmlspecialchars($survey['title']); ?></h3>
                            <p class="survey-description"><?php echo htmlspecialchars($survey['description']); ?></p>
                            <div class="survey-meta">
                                <p><strong>Deadline:</strong> <?php echo date('M j, Y', strtotime($survey['ends_at'])); ?></p>
                                <p><strong>Time Left:</strong> 
                                    <?php 
                                    $now = new DateTime();
                                    $end = new DateTime($survey['ends_at']);
                                    $interval = $now->diff($end);
                                    echo $interval->format('%a days %h hours');
                                    ?>
                                </p>
                            </div>
                            
                            <?php if ($survey['completed']): ?>
                                <div class="survey-status completed">
                                    <i class="fas fa-check-circle"></i> Completed
                                </div>
                            <?php else: ?>
                                <a href="survey.php?id=<?php echo $survey['id']; ?>" class="btn btn-primary">Take Survey</a>
                            <?php endif; ?>
                        </div>
                    <?php endforeach; ?>
                </div>
            <?php else: ?>
                <p class="no-surveys">No surveys available at this time.</p>
            <?php endif; ?>
        </div>
    </div>
    
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</body>
</html>     user/survey_response.php:  <?php
require_once '../includes/auth.php';
requireLogin();

$survey_id = $_GET['id'] ?? 0;

// Get survey info
$stmt = $pdo->prepare("
    SELECT s.*, GROUP_CONCAT(f.field_name) as field_names 
    FROM surveys s
    LEFT JOIN survey_fields f ON s.id = f.survey_id
    WHERE s.id = ? AND s.is_active = TRUE 
    AND (s.starts_at <= NOW() AND s.ends_at >= NOW())
    GROUP BY s.id
");
$stmt->execute([$survey_id]);
$survey = $stmt->fetch();

if (!$survey) {
    header("Location: dashboard.php?error=survey_not_found");
    exit();
}

// Check if user has permission to take this survey
$allowed_roles = json_decode($survey['target_roles'], true);
if (!in_array($_SESSION['role'], $allowed_roles)) {
    header("Location: dashboard.php?error=not_authorized");
    exit();
}

// Check if user has already completed this survey
$stmt = $pdo->prepare("SELECT id FROM survey_responses WHERE survey_id = ? AND user_id = ?");
$stmt->execute([$survey_id, $_SESSION['user_id']]);
$completed = $stmt->fetch();

if ($completed) {
    header("Location: dashboard.php?error=already_completed");
    exit();
}

// Get survey fields
$stmt = $pdo->prepare("SELECT * FROM survey_fields WHERE survey_id = ? ORDER BY display_order");
$stmt->execute([$survey_id]);
$fields = $stmt->fetchAll();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $errors = [];
    $response_data = [];
    
    // Validate all required fields
    foreach ($fields as $field) {
        $field_name = $field['field_name'];
        $field_value = $_POST[$field_name] ?? null;
        
        // Check required fields
        if ($field['is_required'] && empty($field_value)) {
            $errors[$field_name] = "This field is required";
            continue;
        }
        
        // Validate based on field type
        $validation_rules = json_decode($field['validation_rules'], true);
        
        if ($validation_rules) {
            // Min length/value validation
            if (isset($validation_rules['min']) && $field_value) {
                if ($field['field_type'] === 'number' && $field_value < $validation_rules['min']) {
                    $errors[$field_name] = "Value must be at least {$validation_rules['min']}";
                } elseif (in_array($field['field_type'], ['text', 'textarea']) && strlen($field_value) < $validation_rules['min']) {
                    $errors[$field_name] = "Must be at least {$validation_rules['min']} characters";
                }
            }
            
            // Max length/value validation
            if (isset($validation_rules['max']) && $field_value) {
                if ($field['field_type'] === 'number' && $field_value > $validation_rules['max']) {
                    $errors[$field_name] = "Value must be at most {$validation_rules['max']}";
                } elseif (in_array($field['field_type'], ['text', 'textarea']) && strlen($field_value) > $validation_rules['max']) {
                    $errors[$field_name] = "Must be at most {$validation_rules['max']} characters";
                }
            }
            
            // Regex validation
            if (isset($validation_rules['regex']) && $field_value) {
                if (!preg_match("/{$validation_rules['regex']}/", $field_value)) {
                    $errors[$field_name] = "Invalid format";
                }
            }
        }
        
        // Handle file uploads
        if ($field['field_type'] === 'file' && isset($_FILES[$field_name])) {
            $file = $_FILES[$field_name];
            
            if ($file['error'] === UPLOAD_ERR_OK) {
                // Create uploads directory if it doesn't exist
                $upload_dir = "../uploads/survey_{$survey_id}";
                if (!file_exists($upload_dir)) {
                    mkdir($upload_dir, 0755, true);
                }
                
                // Generate unique filename
                $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
                $filename = "user_{$_SESSION['user_id']}_" . uniqid() . ".$ext";
                $filepath = "$upload_dir/$filename";
                
                if (move_uploaded_file($file['tmp_name'], $filepath)) {
                    $field_value = $filename;
                } else {
                    $errors[$field_name] = "Failed to upload file";
                }
            } elseif ($file['error'] !== UPLOAD_ERR_NO_FILE) {
                $errors[$field_name] = "File upload error";
            }
        }
        
        // For checkbox fields, handle array values
        if ($field['field_type'] === 'checkbox' && isset($_POST[$field_name]) && is_array($_POST[$field_name])) {
            $field_value = implode(', ', $_POST[$field_name]);
        }
        
        // For radio/select fields, ensure value is in options
        if (in_array($field['field_type'], ['radio', 'select']) && $field_value) {
            $options = json_decode($field['field_options'], true);
            if (!in_array($field_value, $options)) {
                $errors[$field_name] = "Invalid selection";
            }
        }
        
        // For rating fields, validate range
        if ($field['field_type'] === 'rating' && $field_value) {
            $rating = intval($field_value);
            if ($rating < 1 || $rating > 5) {
                $errors[$field_name] = "Invalid rating value";
            }
        }
        
        if (!isset($errors[$field_name])) {
            $response_data[] = [
                'field_id' => $field['id'],
                'field_value' => $field_value
            ];
        }
    }
    
    if (empty($errors)) {
        try {
            $pdo->beginTransaction();
            
            // Create survey response
            $stmt = $pdo->prepare("INSERT INTO survey_responses (survey_id, user_id) VALUES (?, ?)");
            $stmt->execute([$survey_id, $_SESSION['user_id']]);
            $response_id = $pdo->lastInsertId();
            
            // Save response data
            foreach ($response_data as $data) {
                if ($data['field_value'] !== null) {
                    $stmt = $pdo->prepare("INSERT INTO response_data (response_id, field_id, field_value) VALUES (?, ?, ?)");
                    $stmt->execute([$response_id, $data['field_id'], $data['field_value']]);
                }
            }
            
            $pdo->commit();
            
            header("Location: dashboard.php?survey_completed=$survey_id");
            exit();
        } catch (Exception $e) {
            $pdo->rollBack();
            $errors['system'] = "An error occurred while saving your response. Please try again.";
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><?php echo htmlspecialchars($survey['title']); ?> - Survey</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <style>
        .survey-header {
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .survey-title {
            margin: 0;
            font-size: 24px;
        }
        .survey-description {
            margin: 10px 0 0;
        }
        .survey-meta {
            margin-top: 15px;
            font-size: 14px;
        }
        .field-error {
            color: #e74c3c;
            font-size: 14px;
            margin-top: 5px;
        }
        .file-preview {
            max-width: 200px;
            max-height: 200px;
            display: block;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Survey: <?php echo htmlspecialchars($survey['title']); ?></h1>
            <nav>
                <a href="dashboard.php">Back to Dashboard</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="survey-content">
            <div class="survey-header">
                <h2 class="survey-title"><?php echo htmlspecialchars($survey['title']); ?></h2>
                <p class="survey-description"><?php echo htmlspecialchars($survey['description']); ?></p>
                <div class="survey-meta">
                    <p>Available from <?php echo date('M j, Y g:i A', strtotime($survey['starts_at'])); ?> to <?php echo date('M j, Y g:i A', strtotime($survey['ends_at'])); ?></p>
                </div>
            </div>
            
            <?php if (isset($errors['system'])): ?>
                <div class="error-message"><?php echo $errors['system']; ?></div>
            <?php endif; ?>
            
            <form method="POST" enctype="multipart/form-data">
                <?php foreach ($fields as $field): ?>
                    <div class="form-field">
                        <?php
                        $field_name = $field['field_name'];
                        $field_value = $_POST[$field_name] ?? '';
                        $error = $errors[$field_name] ?? '';
                        ?>
                        
                        <?php if ($field['field_type'] === 'text'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="text" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                       value="<?php echo htmlspecialchars($field_value); ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'textarea'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <textarea id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                          rows="4" <?php if ($field['is_required']): ?>required<?php endif; ?>><?php 
                                          echo htmlspecialchars($field_value); ?></textarea>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'radio'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label>
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <div class="options">
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <label class="option">
                                            <input type="radio" name="<?php echo $field_name; ?>" 
                                                   value="<?php echo htmlspecialchars($option); ?>"
                                                   <?php if ($field_value === $option): ?>checked<?php endif; ?>
                                                   <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'checkbox'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label>
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <div class="options">
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    $selected_values = is_array($field_value) ? $field_value : explode(', ', $field_value);
                                    foreach ($options as $option): ?>
                                        <label class="option">
                                            <input type="checkbox" name="<?php echo $field_name; ?>[]" 
                                                   value="<?php echo htmlspecialchars($option); ?>"
                                                   <?php if (in_array($option, $selected_values)): ?>checked<?php endif; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'select'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <select id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>"
                                        <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                    <option value="">Select an option</option>
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <option value="<?php echo htmlspecialchars($option); ?>"
                                                <?php if ($field_value === $option): ?>selected<?php endif; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'number'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="number" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                       value="<?php echo htmlspecialchars($field_value); ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'date'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="date" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                       value="<?php echo htmlspecialchars($field_value); ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'rating'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label>
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <div class="rating-container">
                                    <input type="hidden" name="<?php echo $field_name; ?>" value="<?php echo htmlspecialchars($field_value); ?>">
                                    <span class="rating-star" data-value="1">★</span>
                                    <span class="rating-star" data-value="2">★</span>
                                    <span class="rating-star" data-value="3">★</span>
                                    <span class="rating-star" data-value="4">★</span>
                                    <span class="rating-star" data-value="5">★</span>
                                    <div class="rating-labels">
                                        <span>1 (Poor)</span>
                                        <span>5 (Excellent)</span>
                                    </div>
                                </div>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'file'): ?>
                            <div class="form-group <?php echo $error ? 'has-error' : ''; ?>">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="file" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Submit Survey</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // Initialize rating fields
        document.querySelectorAll('.rating-container').forEach(container => {
            const stars = container.querySelectorAll('.rating-star');
            const hiddenInput = container.querySelector('input[type="hidden"]');
            
            // Set initial stars if value exists
            if (hiddenInput.value) {
                const value = parseInt(hiddenInput.value);
                stars.forEach((star, i) => {
                    if (i < value) {
                        star.classList.add('active');
                    }
                });
            }
            
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseInt(this.dataset.value);
                    stars.forEach((s, i) => {
                        if (i < value) {
                            s.classList.add('active');
                        } else {
                            s.classList.remove('active');
                        }
                    });
                    hiddenInput.value = value;
                });
            });
        });
        
        // Preview image before upload
        document.querySelectorAll('input[type="file"]').forEach(input => {
            input.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.match('image.*')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(readerEvent) {
                        // Remove existing preview if any
                        const existingPreview = input.nextElementSibling;
                        if (existingPreview && existingPreview.classList.contains('file-preview')) {
                            existingPreview.remove();
                        }
                        
                        // Create new preview
                        const preview = document.createElement('img');
                        preview.src = readerEvent.target.result;
                        preview.className = 'file-preview';
                        input.parentNode.insertBefore(preview, input.nextSibling);
                    }
                    
                    reader.readAsDataURL(file);
                }
            });
        });
    </script>
</body>
</html>    user/survey.php:  <?php
require_once '../includes/auth.php';
requireLogin();

$survey_id = $_GET['id'] ?? 0;

// Get survey info
$stmt = $pdo->prepare("
    SELECT s.* 
    FROM surveys s
    WHERE s.id = ? 
    AND s.is_active = TRUE 
    AND s.starts_at <= NOW() 
    AND s.ends_at >= NOW()
    AND JSON_CONTAINS(s.target_roles, JSON_QUOTE(?))
");
$stmt->execute([$survey_id, $_SESSION['role']]);
$survey = $stmt->fetch();

if (!$survey) {
    header("Location: dashboard.php?error=survey_not_found");
    exit();
}

// Check if user has already completed this survey
$stmt = $pdo->prepare("SELECT id FROM survey_responses WHERE survey_id = ? AND user_id = ?");
$stmt->execute([$survey_id, $_SESSION['user_id']]);
$completed = $stmt->fetch();

if ($completed) {
    header("Location: dashboard.php?error=already_completed");
    exit();
}

// Get survey fields
$stmt = $pdo->prepare("SELECT * FROM survey_fields WHERE survey_id = ? ORDER BY display_order");
$stmt->execute([$survey_id]);
$fields = $stmt->fetchAll();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $errors = [];
    $response_data = [];
    
    // Validate all required fields
    foreach ($fields as $field) {
        $field_name = $field['field_name'];
        $field_value = $_POST[$field_name] ?? null;
        
        // Check required fields
        if ($field['is_required'] && empty($field_value)) {
            $errors[$field_name] = "This field is required";
            continue;
        }
        
        // Validate based on field type
        $validation_rules = json_decode($field['validation_rules'], true);
        
        if ($validation_rules) {
            // Min length/value validation
            if (isset($validation_rules['min']) && $field_value) {
                if ($field['field_type'] === 'number' && $field_value < $validation_rules['min']) {
                    $errors[$field_name] = "Value must be at least {$validation_rules['min']}";
                } elseif (in_array($field['field_type'], ['text', 'textarea']) && strlen($field_value) < $validation_rules['min']) {
                    $errors[$field_name] = "Must be at least {$validation_rules['min']} characters";
                }
            }
            
            // Max length/value validation
            if (isset($validation_rules['max']) && $field_value) {
                if ($field['field_type'] === 'number' && $field_value > $validation_rules['max']) {
                    $errors[$field_name] = "Value must be at most {$validation_rules['max']}";
                } elseif (in_array($field['field_type'], ['text', 'textarea']) && strlen($field_value) > $validation_rules['max']) {
                    $errors[$field_name] = "Must be at most {$validation_rules['max']} characters";
                }
            }
            
            // Regex validation
            if (isset($validation_rules['regex']) && $field_value) {
                if (!preg_match("/{$validation_rules['regex']}/", $field_value)) {
                    $errors[$field_name] = "Invalid format";
                }
            }
        }
        
        // Handle file uploads
        if ($field['field_type'] === 'file' && isset($_FILES[$field_name])) {
            $file = $_FILES[$field_name];
            
            if ($file['error'] === UPLOAD_ERR_OK) {
                // Create uploads directory if it doesn't exist
                $upload_dir = "../uploads/survey_{$survey_id}";
                if (!file_exists($upload_dir)) {
                    mkdir($upload_dir, 0755, true);
                }
                
                // Generate unique filename
                $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
                $filename = "user_{$_SESSION['user_id']}_" . uniqid() . ".$ext";
                $filepath = "$upload_dir/$filename";
                
                if (move_uploaded_file($file['tmp_name'], $filepath)) {
                    $field_value = $filename;
                } else {
                    $errors[$field_name] = "Failed to upload file";
                }
            } elseif ($file['error'] !== UPLOAD_ERR_NO_FILE) {
                $errors[$field_name] = "File upload error";
            }
        }
        
        // For checkbox fields, handle array values
        if ($field['field_type'] === 'checkbox' && isset($_POST[$field_name]) && is_array($_POST[$field_name])) {
            $field_value = implode(', ', $_POST[$field_name]);
        }
        
        // For radio/select fields, ensure value is in options
        if (in_array($field['field_type'], ['radio', 'select']) && $field_value) {
            $options = json_decode($field['field_options'], true);
            if (!in_array($field_value, $options)) {
                $errors[$field_name] = "Invalid selection";
            }
        }
        
        // For rating fields, validate range
        if ($field['field_type'] === 'rating' && $field_value) {
            $rating = intval($field_value);
            if ($rating < 1 || $rating > 5) {
                $errors[$field_name] = "Invalid rating value";
            }
        }
        
        if (!isset($errors[$field_name])) {
            $response_data[] = [
                'field_id' => $field['id'],
                'field_value' => $field_value
            ];
        }
    }
    
    if (empty($errors)) {
        try {
            $pdo->beginTransaction();
            
            // Create survey response
            $stmt = $pdo->prepare("INSERT INTO survey_responses (survey_id, user_id) VALUES (?, ?)");
            $stmt->execute([$survey_id, $_SESSION['user_id']]);
            $response_id = $pdo->lastInsertId();
            
            // Save response data
            foreach ($response_data as $data) {
                if ($data['field_value'] !== null) {
                    $stmt = $pdo->prepare("INSERT INTO response_data (response_id, field_id, field_value) VALUES (?, ?, ?)");
                    $stmt->execute([$response_id, $data['field_id'], $data['field_value']]);
                }
            }
            
            $pdo->commit();
            
            header("Location: dashboard.php?survey_completed=$survey_id");
            exit();
        } catch (Exception $e) {
            $pdo->rollBack();
            $errors['system'] = "An error occurred while saving your response. Please try again.";
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><?php echo htmlspecialchars($survey['title']); ?> - Survey</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <style>
        .survey-header {
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .survey-title {
            margin: 0;
            font-size: 24px;
        }
        .survey-description {
            margin: 10px 0 0;
        }
        .survey-meta {
            margin-top: 15px;
            font-size: 14px;
        }
        .field-error {
            color: #e74c3c;
            font-size: 14px;
            margin-top: 5px;
        }
        .file-preview {
            max-width: 200px;
            max-height: 200px;
            display: block;
            margin-top: 10px;
        }
        .progress-bar {
            height: 5px;
            background-color: #3498db;
            margin-bottom: 20px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><?php echo htmlspecialchars($survey['title']); ?></h1>
            <nav>
                <a href="dashboard.php">Back to Dashboard</a>
                <a href="../logout.php">Logout</a>
            </nav>
        </header>
        
        <div class="progress-bar" style="width: <?php echo count($fields) > 0 ? (100/count($fields)) : 100; ?>%"></div>
        
        <div class="survey-content">
            <div class="survey-header">
                <h2 class="survey-title"><?php echo htmlspecialchars($survey['title']); ?></h2>
                <p class="survey-description"><?php echo htmlspecialchars($survey['description']); ?></p>
                <div class="survey-meta">
                    <p>Deadline: <?php echo date('M j, Y g:i A', strtotime($survey['ends_at'])); ?></p>
                    <?php 
                    $now = new DateTime();
                    $end = new DateTime($survey['ends_at']);
                    $interval = $now->diff($end);
                    ?>
                    <p>Time remaining: <?php echo $interval->format('%a days %h hours'); ?></p>
                </div>
            </div>
            
            <?php if (isset($errors['system'])): ?>
                <div class="error-message"><?php echo $errors['system']; ?></div>
            <?php endif; ?>
            
            <form method="POST" enctype="multipart/form-data" id="survey-form">
                <?php foreach ($fields as $field): ?>
                    <?php
                    $field_name = $field['field_name'];
                    $field_value = $_POST[$field_name] ?? '';
                    $error = $errors[$field_name] ?? '';
                    ?>
                    
                    <div class="form-field <?php echo $error ? 'has-error' : ''; ?>">
                        <?php if ($field['field_type'] === 'text'): ?>
                            <div class="form-group">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="text" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                       value="<?php echo htmlspecialchars($field_value); ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'textarea'): ?>
                            <div class="form-group">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <textarea id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                          rows="4" <?php if ($field['is_required']): ?>required<?php endif; ?>><?php 
                                          echo htmlspecialchars($field_value); ?></textarea>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'radio'): ?>
                            <div class="form-group">
                                <label>
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <div class="options">
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <label class="option">
                                            <input type="radio" name="<?php echo $field_name; ?>" 
                                                   value="<?php echo htmlspecialchars($option); ?>"
                                                   <?php if ($field_value === $option): ?>checked<?php endif; ?>
                                                   <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'checkbox'): ?>
                            <div class="form-group">
                                <label>
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <div class="options">
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    $selected_values = is_array($field_value) ? $field_value : explode(', ', $field_value);
                                    foreach ($options as $option): ?>
                                        <label class="option">
                                            <input type="checkbox" name="<?php echo $field_name; ?>[]" 
                                                   value="<?php echo htmlspecialchars($option); ?>"
                                                   <?php if (in_array($option, $selected_values)): ?>checked<?php endif; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'select'): ?>
                            <div class="form-group">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <select id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>"
                                        <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                    <option value="">Select an option</option>
                                    <?php 
                                    $options = json_decode($field['field_options'], true);
                                    foreach ($options as $option): ?>
                                        <option value="<?php echo htmlspecialchars($option); ?>"
                                                <?php if ($field_value === $option): ?>selected<?php endif; ?>>
                                            <?php echo htmlspecialchars($option); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'number'): ?>
                            <div class="form-group">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="number" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                       value="<?php echo htmlspecialchars($field_value); ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'date'): ?>
                            <div class="form-group">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="date" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>" 
                                       value="<?php echo htmlspecialchars($field_value); ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'rating'): ?>
                            <div class="form-group">
                                <label>
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <div class="rating-container">
                                    <input type="hidden" name="<?php echo $field_name; ?>" value="<?php echo htmlspecialchars($field_value); ?>">
                                    <span class="rating-star" data-value="1">★</span>
                                    <span class="rating-star" data-value="2">★</span>
                                    <span class="rating-star" data-value="3">★</span>
                                    <span class="rating-star" data-value="4">★</span>
                                    <span class="rating-star" data-value="5">★</span>
                                    <div class="rating-labels">
                                        <span>1 (Poor)</span>
                                        <span>5 (Excellent)</span>
                                    </div>
                                </div>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        
                        <?php elseif ($field['field_type'] === 'file'): ?>
                            <div class="form-group">
                                <label for="<?php echo $field_name; ?>">
                                    <?php echo htmlspecialchars($field['field_label']); ?>
                                    <?php if ($field['is_required']): ?><span class="required">*</span><?php endif; ?>
                                </label>
                                <input type="file" id="<?php echo $field_name; ?>" name="<?php echo $field_name; ?>"
                                       <?php if ($field['is_required']): ?>required<?php endif; ?>>
                                <?php if ($error): ?><div class="field-error"><?php echo $error; ?></div><?php endif; ?>
                            </div>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Submit Survey</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // Initialize rating fields
        document.querySelectorAll('.rating-container').forEach(container => {
            const stars = container.querySelectorAll('.rating-star');
            const hiddenInput = container.querySelector('input[type="hidden"]');
            
            // Set initial stars if value exists
            if (hiddenInput.value) {
                const value = parseInt(hiddenInput.value);
                stars.forEach((star, i) => {
                    if (i < value) {
                        star.classList.add('active');
                    }
                });
            }
            
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseInt(this.dataset.value);
                    stars.forEach((s, i) => {
                        if (i < value) {
                            s.classList.add('active');
                        } else {
                            s.classList.remove('active');
                        }
                    });
                    hiddenInput.value = value;
                });
            });
        });
        
        // Preview image before upload
        document.querySelectorAll('input[type="file"]').forEach(input => {
            input.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.match('image.*')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(readerEvent) {
                        // Remove existing preview if any
                        const existingPreview = input.nextElementSibling;
                        if (existingPreview && existingPreview.classList.contains('file-preview')) {
                            existingPreview.remove();
                        }
                        
                        // Create new preview
                        const preview = document.createElement('img');
                        preview.src = readerEvent.target.result;
                        preview.className = 'file-preview';
                        input.parentNode.insertBefore(preview, input.nextSibling);
                    }
                    
                    reader.readAsDataURL(file);
                }
            });
        });
        
        // Form progress tracking
        document.getElementById('survey-form').addEventListener('input', function() {
            const fields = document.querySelectorAll('.form-field');
            let completed = 0;
            
            fields.forEach(field => {
                const inputs = field.querySelectorAll('input:not([type="hidden"]), textarea, select');
                let fieldCompleted = false;
                
                inputs.forEach(input => {
                    if (input.type === 'checkbox' || input.type === 'radio') {
                        if (input.checked) fieldCompleted = true;
                    } else if (input.type === 'file') {
                        if (input.files.length > 0) fieldCompleted = true;
                    } else {
                        if (input.value.trim() !== '') fieldCompleted = true;
                    }
                });
                
                if (fieldCompleted) completed++;
            });
            
            const progress = (completed / fields.length) * 100;
            document.querySelector('.progress-bar').style.width = progress + '%';
        });
    </script>
</body>
</html>  user/chat.php //add this code       user/feedback.php  //add this code   user/contact.php add this code. index.php file:  <?php
require_once 'includes/auth.php';

// Redirect based on login status
$auth = new Auth();
if ($auth->isLoggedIn()) {
    header("Location: " . ($auth->getUser()['role'] === 'admin' ? 'admin/dashboard.php' : 'user/dashboard.php'));
}else {
        header("Location: login.php");
}
exit();
login.php file:  <?php
require_once 'includes/auth.php';

if (isLoggedIn()) {
    header("Location: " . ($_SESSION['role'] === 'admin' ? 'admin/dashboard.php' : 'user/dashboard.php'));
    exit();
}

$error = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';
    
    $stmt = $pdo->prepare("SELECT * FROM users WHERE username = ?");
    $stmt->execute([$username]);
    $user = $stmt->fetch();
    
    if ($user && password_verify($password, $user['password'])) {
        $_SESSION['user_id'] = $user['id'];
        $_SESSION['username'] = $user['username'];
        $_SESSION['role'] = $user['role'];
        
        // Update last login
        $pdo->prepare("UPDATE users SET last_login = NOW() WHERE id = ?")->execute([$user['id']]);
        
        header("Location: " . ($user['role'] === 'admin' ? 'admin/dashboard.php' : 'user/dashboard.php'));
        exit();
    } else {
        $error = "Invalid username or password";
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login - Survey System</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <style>
        .login-container {
            max-width: 400px;
            margin: 50px auto;
            padding: 30px;
            background: white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .login-title {
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .login-logo {
            text-align: center;
            margin-bottom: 20px;
            font-size: 48px;
            color: #3498db;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-logo">
            <i class="fas fa-poll-h"></i>
        </div>
        <h1 class="login-title">Survey System Login</h1>
        
        <?php if ($error): ?>
            <div class="error-message"><?php echo $error; ?></div>
        <?php endif; ?>
        
        <form method="POST">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required autofocus>
            </div>
            
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
        
        <div class="login-footer">
            <p>Don't have an account? <a href="register.php">Register here</a></p>
            <p><a href="forgot_password.php">Forgot your password?</a></p>
        </div>
    </div>
    
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</body>
</html>   logout.php:  <?php
require_once 'includes/auth.php';

// Destroy the session
session_destroy();

// Redirect to login page
header("Location: login.php");
exit();
?>                                  README.md file:  //empty write and add README.md.   register.php file:  <?php
require_once 'includes/auth.php';

if (isLoggedIn()) {
    header("Location: " . ($_SESSION['role'] === 'admin' ? 'admin/dashboard.php' : 'user/dashboard.php'));
    exit();
}

$errors = [];
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'] ?? '';
    $email = $_POST['email'] ?? '';
    $password = $_POST['password'] ?? '';
    $confirm_password = $_POST['confirm_password'] ?? '';
    $role = $_POST['role'] ?? 'parent';
    
    // Validation
    if (empty($username)) $errors['username'] = "Username is required";
    if (empty($email)) $errors['email'] = "Email is required";
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) $errors['email'] = "Invalid email format";
    if (empty($password)) $errors['password'] = "Password is required";
    if (strlen($password) < 6) $errors['password'] = "Password must be at least 6 characters";
    if ($password !== $confirm_password) $errors['confirm_password'] = "Passwords do not match";
    
    // Check if username or email exists
    if (empty($errors)) {
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM users WHERE username = ? OR email = ?");
        $stmt->execute([$username, $email]);
        $count = $stmt->fetchColumn();
        
        if ($count > 0) {
            $errors['general'] = "Username or email already exists";
        }
    }
    
    if (empty($errors)) {
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
        $stmt = $pdo->prepare("INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)");
        
        if ($stmt->execute([$username, $email, $hashed_password, $role])) {
            $_SESSION['success'] = "Registration successful! Please login.";
            header("Location: login.php");
            exit();
        } else {
            $errors['general'] = "Registration failed. Please try again.";
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register - Survey System</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <style>
        .register-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 30px;
            background: white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .register-title {
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .register-logo {
            text-align: center;
            margin-bottom: 20px;
            font-size: 48px;
            color: #3498db;
        }
        .role-selector {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        .role-option {
            flex: 1;
            text-align: center;
        }
        .role-option input {
            display: none;
        }
        .role-option label {
            display: block;
            padding: 15px;
            background: #f5f5f5;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .role-option input:checked + label {
            background: #3498db;
            color: white;
        }
        .role-icon {
            font-size: 24px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="register-logo">
            <i class="fas fa-user-plus"></i>
        </div>
        <h1 class="register-title">Create an Account</h1>
        
        <?php if (isset($errors['general'])): ?>
            <div class="error-message"><?php echo $errors['general']; ?></div>
        <?php endif; ?>
        
        <form method="POST">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" value="<?php echo htmlspecialchars($username ?? ''); ?>" required>
                <?php if (isset($errors['username'])): ?>
                    <div class="field-error"><?php echo $errors['username']; ?></div>
                <?php endif; ?>
            </div>
            
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" value="<?php echo htmlspecialchars($email ?? ''); ?>" required>
                <?php if (isset($errors['email'])): ?>
                    <div class="field-error"><?php echo $errors['email']; ?></div>
                <?php endif; ?>
            </div>
            
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
                <?php if (isset($errors['password'])): ?>
                    <div class="field-error"><?php echo $errors['password']; ?></div>
                <?php endif; ?>
            </div>
            
            <div class="form-group">
                <label for="confirm_password">Confirm Password:</label>
                <input type="password" id="confirm_password" name="confirm_password" required>
                <?php if (isset($errors['confirm_password'])): ?>
                    <div class="field-error"><?php echo $errors['confirm_password']; ?></div>
                <?php endif; ?>
            </div>
            
            <div class="form-group">
                <label>Account Type:</label>
                <div class="role-selector">
                    <div class="role-option">
                        <input type="radio" id="role_parent" name="role" value="parent" checked>
                        <label for="role_parent">
                            <div class="role-icon"><i class="fas fa-user-friends"></i></div>
                            Parent
                        </label>
                    </div>
                    <div class="role-option">
                        <input type="radio" id="role_teacher" name="role" value="teacher">
                        <label for="role_teacher">
                            <div class="role-icon"><i class="fas fa-chalkboard-teacher"></i></div>
                            Teacher
                        </label>
                    </div>
                    <div class="role-option">
                        <input type="radio" id="role_student" name="role" value="student">
                        <label for="role_student">
                            <div class="role-icon"><i class="fas fa-user-graduate"></i></div>
                            Student
                        </label>
                    </div>
                </div>
            </div>
            
            <button type="submit" class="btn btn-primary btn-block">Register</button>
        </form>
        
        <div class="login-footer">
            <p>Already have an account? <a href="login.php">Login here</a></p>
        </div>
    </div>
    
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</body>
</html>   See all this Add necessary missing codes, make them read each other use php,css,js,html,mysql to make it simple and minimize the requirement to use the system